
firstproject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003464  08003464  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800346c  0800346c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  080034e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080034e4  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_line   00009466  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007f  00000000  00000000  00029549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00007e72  00000000  00000000  000295c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000018df  00000000  00000000  0003143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000778  00000000  00000000  00032d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008739b  00000000  00000000  00033498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000058b  00000000  00000000  000ba833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001675a  00000000  00000000  000badbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002430  00000000  00000000  000d1518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080033d4 	.word	0x080033d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080033d4 	.word	0x080033d4

080001e0 <SVC_Handler>:
  .thumb //Practically this only matters to the CPU, but it ensures that the correct types of instructions get included

  .global SVC_Handler //We need to indicate to the linker that this function exists
  .thumb_func //We need to ensure that the address of our interrupt function is properly aligned or we hard fault. a LOT
  SVC_Handler: //our function name
	TST LR, 4 //TeST the 3rd bit in LR (4 is 0b1000, so its 3rd bit is 1)
 80001e0:	f01e 0f04 	tst.w	lr, #4
	ITE EQ //If Then Equal
 80001e4:	bf0c      	ite	eq
	MRSEQ R0, MSP //If the third bit is set, we are using MSP. Set us up to use that
 80001e6:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP //Otherwise, use PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main //Go to the C function, because screw assembly
 80001ee:	f000 bab1 	b.w	8000754 <SVC_Handler_Main>

080001f2 <runFirstThread>:

  .global runFirstThread //Running the first thread requires some special consideration, so it is its own function
  .thumb_func
  runFirstThread:
  	//Restore MSP since we have two things on there that won't go away
  	POP {R7}
 80001f2:	bc80      	pop	{r7}
  	POP {R7}
 80001f4:	bc80      	pop	{r7}

  	//Get ready for PSP
  	MRS R0, PSP
 80001f6:	f3ef 8009 	mrs	r0, PSP
  	MOV LR, #0xFFFFFFFD
 80001fa:	f06f 0e02 	mvn.w	lr, #2
  	LDMIA R0!,{R4-R11}
 80001fe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  	MSR PSP, R0
 8000202:	f380 8809 	msr	PSP, r0
  	BX LR
 8000206:	4770      	bx	lr

08000208 <PendSV_Handler>:
	//Restore MSP since we have two things on there that won't go away
	//POP {R7}
	//POP {R7}

	//Perform the switch
	MRS R0, PSP
 8000208:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!,{R4-R11}
 800020c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BL osSched
 8000210:	f000 fad2 	bl	80007b8 <osSched>
	MRS R0, PSP
 8000214:	f3ef 8009 	mrs	r0, PSP
	MOV LR, #0xFFFFFFFD
 8000218:	f06f 0e02 	mvn.w	lr, #2
	LDMIA R0!,{R4-R11}
 800021c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 8000220:	f380 8809 	msr	PSP, r0
	BX LR
 8000224:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <system_call3>:
uint32_t default_time = 5*CLOCK_RATE;
volatile uint32_t thread_timer = 4200000;

/* -------------- System Calls -------------- */
void system_call3()
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	__asm("SVC #3");
 80005d0:	df03      	svc	3
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <system_call4>:
void system_call4()
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	__asm("SVC #4");
 80005e0:	df04      	svc	4
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <osKernelInitialize>:

void osKernelInitialize() {
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	MSP_INIT_VAL = *(uint32_t**)0x0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <osKernelInitialize+0x38>)
 80005f6:	6013      	str	r3, [r2, #0]
	current_stack = MSP_INIT_VAL;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <osKernelInitialize+0x38>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <osKernelInitialize+0x3c>)
 80005fe:	6013      	str	r3, [r2, #0]
	//set the priority of PendSV to almost the weakest
	SHPR3 |= 0xFE << 16; //shift the constant 0xFE 16 bits to set PendSV priority
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <osKernelInitialize+0x40>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a09      	ldr	r2, [pc, #36]	; (800062c <osKernelInitialize+0x40>)
 8000606:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
 800060a:	6013      	str	r3, [r2, #0]
	SHPR2 |= 0xFDU << 24; //Set the priority of SVC higher than PendSV
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <osKernelInitialize+0x44>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <osKernelInitialize+0x44>)
 8000612:	f043 437d 	orr.w	r3, r3, #4244635648	; 0xfd000000
 8000616:	6013      	str	r3, [r2, #0]

}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	20000090 	.word	0x20000090
 800062c:	e000ed20 	.word	0xe000ed20
 8000630:	e000ed1c 	.word	0xe000ed1c

08000634 <osKernelStart>:

void osKernelStart() {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	system_call3();
 8000638:	f7ff ffc8 	bl	80005cc <system_call3>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <osCreateThread>:

bool osCreateThread(void* args, void* fnc_ptr) {
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	uint32_t* new_sp = allocateStack();
 800064a:	f000 f863 	bl	8000714 <allocateStack>
 800064e:	6178      	str	r0, [r7, #20]
	if (new_sp == NULL) {
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <osCreateThread+0x1a>
		return false;
 8000656:	2300      	movs	r3, #0
 8000658:	e04f      	b.n	80006fa <osCreateThread+0xba>
	}
	else {
		*(--new_sp) = 1<<24; //A magic number, this is xPSR
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3b04      	subs	r3, #4
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000666:	601a      	str	r2, [r3, #0]
		*(--new_sp) = (uint32_t)fnc_ptr; //the thread function
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3b04      	subs	r3, #4
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 5; i++)  // R0 is the 5th register
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e008      	b.n	800068c <osCreateThread+0x4c>
		{
		  *(--new_sp) = 0xA;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3b04      	subs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	220a      	movs	r2, #10
 8000684:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 5; i++)  // R0 is the 5th register
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	3301      	adds	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b04      	cmp	r3, #4
 8000690:	ddf3      	ble.n	800067a <osCreateThread+0x3a>
		}
		*(--new_sp) = (uint32_t)args;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3b04      	subs	r3, #4
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e008      	b.n	80006b6 <osCreateThread+0x76>
		{
			*(--new_sp) = 0xA;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3b04      	subs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	220a      	movs	r2, #10
 80006ae:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	ddf3      	ble.n	80006a4 <osCreateThread+0x64>
		}
	}
	mythread.sp = new_sp;
 80006bc:	4a11      	ldr	r2, [pc, #68]	; (8000704 <osCreateThread+0xc4>)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	6013      	str	r3, [r2, #0]
	mythread.thread_function = fnc_ptr;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <osCreateThread+0xc4>)
 80006c6:	6053      	str	r3, [r2, #4]
	mythread.timeslice = default_time;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <osCreateThread+0xc8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <osCreateThread+0xc4>)
 80006ce:	6093      	str	r3, [r2, #8]
	mythread.runtime = default_time;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <osCreateThread+0xc8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <osCreateThread+0xc4>)
 80006d6:	60d3      	str	r3, [r2, #12]
	threads[nThreads] = mythread;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <osCreateThread+0xcc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <osCreateThread+0xd0>)
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	4413      	add	r3, r2
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <osCreateThread+0xc4>)
 80006e4:	461c      	mov	r4, r3
 80006e6:	4613      	mov	r3, r2
 80006e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	nThreads++;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <osCreateThread+0xcc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a05      	ldr	r2, [pc, #20]	; (800070c <osCreateThread+0xcc>)
 80006f6:	6013      	str	r3, [r2, #0]
	return true;
 80006f8:	2301      	movs	r3, #1
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	20000094 	.word	0x20000094
 8000708:	20000004 	.word	0x20000004
 800070c:	200000a4 	.word	0x200000a4
 8000710:	200000a8 	.word	0x200000a8

08000714 <allocateStack>:
	threads[nThreads] = mythread;
	nThreads++;
	return true;
}

uint32_t* allocateStack() {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	if (current_stack > MSP_INIT_VAL - (0x4000 - STACK_SIZE)) {
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <allocateStack+0x38>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f5a3 4270 	sub.w	r2, r3, #61440	; 0xf000
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <allocateStack+0x3c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d206      	bcs.n	8000736 <allocateStack+0x22>
		current_stack = current_stack - STACK_SIZE;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <allocateStack+0x3c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <allocateStack+0x3c>)
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e002      	b.n	800073c <allocateStack+0x28>
	}
	else {
		current_stack = NULL;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <allocateStack+0x3c>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	}
	return current_stack;
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <allocateStack+0x3c>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	20000090 	.word	0x20000090

08000754 <SVC_Handler_Main>:

void SVC_Handler_Main( unsigned int *svc_args )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	unsigned int svc_number;
	svc_number = ( ( char * )svc_args[ 6 ] )[ -2 ] ;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3318      	adds	r3, #24
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3b02      	subs	r3, #2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
	switch( svc_number )
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d003      	beq.n	8000776 <SVC_Handler_Main+0x22>
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b04      	cmp	r3, #4
 8000772:	d00e      	beq.n	8000792 <SVC_Handler_Main+0x3e>
			//Pend an interrupt to do the context switch
			_ICSR |= 1<<28;
			__asm("isb");
		break;
	default: /* unknown SVC */
		break;
 8000774:	e016      	b.n	80007a4 <SVC_Handler_Main+0x50>
		__set_PSP((uint32_t)threads[curThreadIndx].sp);
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <SVC_Handler_Main+0x58>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <SVC_Handler_Main+0x5c>)
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f383 8809 	msr	PSP, r3
}
 800078a:	bf00      	nop
		runFirstThread();
 800078c:	f7ff fd31 	bl	80001f2 <runFirstThread>
		break;
 8000790:	e008      	b.n	80007a4 <SVC_Handler_Main+0x50>
			_ICSR |= 1<<28;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <SVC_Handler_Main+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <SVC_Handler_Main+0x60>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6013      	str	r3, [r2, #0]
			__asm("isb");
 800079e:	f3bf 8f6f 	isb	sy
		break;
 80007a2:	bf00      	nop
	}
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	200000a8 	.word	0x200000a8
 80007b4:	e000ed04 	.word	0xe000ed04

080007b8 <osSched>:

void osSched()
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80007be:	f3ef 8309 	mrs	r3, PSP
 80007c2:	603b      	str	r3, [r7, #0]
  return(result);
 80007c4:	683b      	ldr	r3, [r7, #0]
	threads[curThreadIndx].sp = (uint32_t*)(__get_PSP() - 8*4);
 80007c6:	f1a3 0220 	sub.w	r2, r3, #32
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <osSched+0x5c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a11      	ldr	r2, [pc, #68]	; (8000818 <osSched+0x60>)
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4413      	add	r3, r2
 80007d6:	6019      	str	r1, [r3, #0]
	curThreadIndx = (curThreadIndx+1)%nThreads;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <osSched+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a0f      	ldr	r2, [pc, #60]	; (800081c <osSched+0x64>)
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80007e6:	fb01 f202 	mul.w	r2, r1, r2
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <osSched+0x5c>)
 80007ee:	6013      	str	r3, [r2, #0]
	__set_PSP((uint32_t)threads[curThreadIndx].sp);
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <osSched+0x5c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <osSched+0x60>)
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f383 8809 	msr	PSP, r3
}
 8000804:	bf00      	nop
	return;
 8000806:	bf00      	nop
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000
 8000818:	200000a8 	.word	0x200000a8
 800081c:	200000a4 	.word	0x200000a4

08000820 <osYield>:

void osYield(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	system_call4();
 8000824:	f7ff feda 	bl	80005dc <system_call4>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int __io_putchar(int ch)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,HAL_MAX_DELAY);
 8000834:	1d39      	adds	r1, r7, #4
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2201      	movs	r2, #1
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <__io_putchar+0x20>)
 800083e:	f001 fad6 	bl	8001dee <HAL_UART_Transmit>
	return ch;
 8000842:	687b      	ldr	r3, [r7, #4]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000198 	.word	0x20000198

08000850 <print1>:
		printf("Hello, PC!\r\n");
	}
}

void print1(void* args)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Thread 1\r\n");
 8000858:	4801      	ldr	r0, [pc, #4]	; (8000860 <print1+0x10>)
 800085a:	f001 ff53 	bl	8002704 <puts>
 800085e:	e7fb      	b.n	8000858 <print1+0x8>
 8000860:	080033f8 	.word	0x080033f8

08000864 <print2>:
		//osYield();
	}
}

void print2(void* args)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Thread 2\r\n");
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <print2+0x10>)
 800086e:	f001 ff49 	bl	8002704 <puts>
 8000872:	e7fb      	b.n	800086c <print2+0x8>
 8000874:	08003404 	.word	0x08003404

08000878 <thread_function>:
		//osYield();
	}
}

void thread_function(void* args)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	//cast the arguments
	uint32_t input = *(uint32_t*)args;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		printf("%u\r\n", input);
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	4801      	ldr	r0, [pc, #4]	; (8000890 <thread_function+0x18>)
 800088a:	f001 fed5 	bl	8002638 <iprintf>
 800088e:	e7fa      	b.n	8000886 <thread_function+0xe>
 8000890:	08003410 	.word	0x08003410

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f000 facd 	bl	8000e38 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f823 	bl	80008e8 <SystemClock_Config>

  MX_GPIO_Init();
 80008a2:	f000 f8b5 	bl	8000a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008a6:	f000 f889 	bl	80009bc <MX_USART2_UART_Init>

  uint32_t x = 0xBA5EBA11;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <main+0x44>)
 80008ac:	607b      	str	r3, [r7, #4]

  osKernelInitialize();
 80008ae:	f7ff fe9d 	bl	80005ec <osKernelInitialize>
  osCreateThread(&x, (void*)print1);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4909      	ldr	r1, [pc, #36]	; (80008dc <main+0x48>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fec2 	bl	8000640 <osCreateThread>
  osCreateThread(&x, (void*)print2);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <main+0x4c>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff febd 	bl	8000640 <osCreateThread>
  osCreateThread(&x, (void*)thread_function);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <main+0x50>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff feb8 	bl	8000640 <osCreateThread>
  osKernelStart();
 80008d0:	f7ff feb0 	bl	8000634 <osKernelStart>

  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x40>
 80008d6:	bf00      	nop
 80008d8:	ba5eba11 	.word	0xba5eba11
 80008dc:	08000851 	.word	0x08000851
 80008e0:	08000865 	.word	0x08000865
 80008e4:	08000879 	.word	0x08000879

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	; 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 ffe4 	bl	80028c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <SystemClock_Config+0xcc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <SystemClock_Config+0xcc>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <SystemClock_Config+0xd0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <SystemClock_Config+0xd0>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2310      	movs	r3, #16
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000958:	2310      	movs	r3, #16
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800095c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000962:	2304      	movs	r3, #4
 8000964:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000966:	2304      	movs	r3, #4
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fd58 	bl	8001424 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800097a:	f000 f8b7 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2302      	movs	r3, #2
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2102      	movs	r1, #2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 ffba 	bl	8001914 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009a6:	f000 f8a1 	bl	8000aec <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART2_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f001 f9ae 	bl	8001d54 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f875 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000198 	.word	0x20000198
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2120      	movs	r1, #32
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0xd4>)
 8000a9c:	f000 fca8 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_GPIO_Init+0xd8>)
 8000ab8:	f000 fb16 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000abc:	2320      	movs	r3, #32
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_GPIO_Init+0xd4>)
 8000ad4:	f000 fb08 	bl	80010e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020800 	.word	0x40020800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 faa2 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_UART_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0x8c>)
 8000bbe:	f000 fa93 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f968 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (threads[curThreadIndx].runtime > 0)
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <SysTick_Handler+0x6c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <SysTick_Handler+0x70>)
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4413      	add	r3, r2
 8000c16:	330c      	adds	r3, #12
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00c      	beq.n	8000c38 <SysTick_Handler+0x34>
  {
	  threads[curThreadIndx].runtime--;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <SysTick_Handler+0x6c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4914      	ldr	r1, [pc, #80]	; (8000c74 <SysTick_Handler+0x70>)
 8000c24:	011a      	lsls	r2, r3, #4
 8000c26:	440a      	add	r2, r1
 8000c28:	320c      	adds	r2, #12
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	4911      	ldr	r1, [pc, #68]	; (8000c74 <SysTick_Handler+0x70>)
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	440b      	add	r3, r1
 8000c34:	330c      	adds	r3, #12
 8000c36:	601a      	str	r2, [r3, #0]
  }
  if (threads[curThreadIndx].runtime == 0)
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <SysTick_Handler+0x6c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <SysTick_Handler+0x70>)
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	4413      	add	r3, r2
 8000c42:	330c      	adds	r3, #12
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10f      	bne.n	8000c6a <SysTick_Handler+0x66>
  {
	  threads[curThreadIndx].runtime = threads[curThreadIndx].timeslice;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <SysTick_Handler+0x6c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <SysTick_Handler+0x6c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <SysTick_Handler+0x70>)
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	440a      	add	r2, r1
 8000c58:	3208      	adds	r2, #8
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	4905      	ldr	r1, [pc, #20]	; (8000c74 <SysTick_Handler+0x70>)
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	440b      	add	r3, r1
 8000c62:	330c      	adds	r3, #12
 8000c64:	601a      	str	r2, [r3, #0]
	  osYield();
 8000c66:	f7ff fddb 	bl	8000820 <osYield>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000
 8000c74:	200000a8 	.word	0x200000a8

08000c78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
  }

  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fdad 	bl	800082c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
  }
  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d12:	605a      	str	r2, [r3, #4]
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f001 fdec 	bl	8002960 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20020000 	.word	0x20020000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	200001dc 	.word	0x200001dc
 8000dbc:	20000330 	.word	0x20000330

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x18>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1c>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x20>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x24>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x28>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0

08000e04 <FillZerobss>:
//  b LoopFillZerobss

FillZerobss:
  str  r3, [r2]
 8000e04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e06:	3204      	adds	r2, #4

08000e08 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e08:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0a:	d3fb      	bcc.n	8000e04 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0c:	f7ff ffd8 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e10:	f001 fdac 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e14:	f7ff fd3e 	bl	8000894 <main>
  bx  lr    
 8000e18:	4770      	bx	lr
 8000e1a:	0000      	.short	0x0000
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e28:	08003474 	.word	0x08003474
  ldr r2, =_sbss
 8000e2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e30:	20000330 	.word	0x20000330

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f90d 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe44 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f917 	bl	80010ce <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f8ed 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	2000000c 	.word	0x2000000c

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000010 	.word	0x20000010
 8000f00:	200001e0 	.word	0x200001e0

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001e0 	.word	0x200001e0

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff47 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff5c 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffb0 	bl	800103c <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e159      	b.n	80013b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 8148 	bne.w	80013b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80a2 	beq.w	80013b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a56      	ldr	r2, [pc, #344]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x2ec>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a49      	ldr	r2, [pc, #292]	; (80013d8 <HAL_GPIO_Init+0x2f0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x202>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a48      	ldr	r2, [pc, #288]	; (80013dc <HAL_GPIO_Init+0x2f4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x1fe>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <HAL_GPIO_Init+0x2f8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a46      	ldr	r2, [pc, #280]	; (80013e4 <HAL_GPIO_Init+0x2fc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x1f6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a45      	ldr	r2, [pc, #276]	; (80013e8 <HAL_GPIO_Init+0x300>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x1f2>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012da:	2307      	movs	r3, #7
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x204>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2ec>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_GPIO_Init+0x304>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_GPIO_Init+0x304>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_GPIO_Init+0x304>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f aea2 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e267      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d075      	beq.n	800152e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001442:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d00c      	beq.n	8001468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	2b08      	cmp	r3, #8
 8001458:	d112      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001466:	d10b      	bne.n	8001480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d05b      	beq.n	800152c <HAL_RCC_OscConfig+0x108>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d157      	bne.n	800152c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e242      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x74>
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6f      	ldr	r2, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xb0>
 80014bc:	4b69      	ldr	r3, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a68      	ldr	r2, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b66      	ldr	r3, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a65      	ldr	r2, [pc, #404]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fd12 	bl	8000f04 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fd0e 	bl	8000f04 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e207      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fcfe 	bl	8000f04 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fcfa 	bl	8000f04 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1f3      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0xe8>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1c7      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <HAL_RCC_OscConfig+0x244>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fcb3 	bl	8000f04 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fcaf 	bl	8000f04 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1a8      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4925      	ldr	r1, [pc, #148]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x244>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc92 	bl	8000f04 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc8e 	bl	8000f04 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e187      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d036      	beq.n	800167c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d016      	beq.n	8001644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x248>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fc72 	bl	8000f04 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fc6e 	bl	8000f04 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e167      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x240>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x200>
 8001642:	e01b      	b.n	800167c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_OscConfig+0x248>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fc5b 	bl	8000f04 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00e      	b.n	8001670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fc57 	bl	8000f04 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d907      	bls.n	8001670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e150      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001664:	40023800 	.word	0x40023800
 8001668:	42470000 	.word	0x42470000
 800166c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ea      	bne.n	8001652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8097 	beq.w	80017b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b81      	ldr	r3, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b7d      	ldr	r3, [pc, #500]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a7c      	ldr	r2, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b7a      	ldr	r3, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b74      	ldr	r3, [pc, #464]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a73      	ldr	r2, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fc17 	bl	8000f04 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fc13 	bl	8000f04 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e10c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x474>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x2ea>
 8001700:	4b64      	ldr	r3, [pc, #400]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a63      	ldr	r2, [pc, #396]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x30c>
 8001716:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a5e      	ldr	r2, [pc, #376]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x324>
 8001730:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a57      	ldr	r2, [pc, #348]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	4b55      	ldr	r3, [pc, #340]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a54      	ldr	r2, [pc, #336]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fbd8 	bl	8000f04 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fbd4 	bl	8000f04 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0cb      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ee      	beq.n	8001758 <HAL_RCC_OscConfig+0x334>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fbc2 	bl	8000f04 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fbbe 	bl	8000f04 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0b5      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ee      	bne.n	8001784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a38      	ldr	r2, [pc, #224]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a1 	beq.w	8001904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d05c      	beq.n	8001888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d141      	bne.n	800185a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x478>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb92 	bl	8000f04 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb8e 	bl	8000f04 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e087      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	491b      	ldr	r1, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x478>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fb67 	bl	8000f04 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fb63 	bl	8000f04 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e05c      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x416>
 8001858:	e054      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fb50 	bl	8000f04 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff fb4c 	bl	8000f04 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e045      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
 8001886:	e03d      	b.n	8001904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e038      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000
 800189c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x4ec>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d028      	beq.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d121      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d11a      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	4293      	cmp	r3, r2
 80018da:	d111      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0cc      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d90c      	bls.n	8001950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	494d      	ldr	r1, [pc, #308]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d044      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d119      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e067      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa7e 	bl	8000f04 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa7a 	bl	8000f04 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e04f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d20c      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4916      	ldr	r1, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f821 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490a      	ldr	r1, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f9de 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08003418 	.word	0x08003418
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	2000000c 	.word	0x2000000c

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b094      	sub	sp, #80	; 0x50
 8001ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44
 8001aec:	2300      	movs	r3, #0
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af0:	2300      	movs	r3, #0
 8001af2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af8:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d00d      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x40>
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f200 80e1 	bhi.w	8001ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b12:	e0db      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b18:	e0db      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1e:	e0d8      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b52:	4622      	mov	r2, r4
 8001b54:	462b      	mov	r3, r5
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	0159      	lsls	r1, r3, #5
 8001b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b64:	0150      	lsls	r0, r2, #5
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	1a51      	subs	r1, r2, r1
 8001b6e:	6139      	str	r1, [r7, #16]
 8001b70:	4629      	mov	r1, r5
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b84:	4659      	mov	r1, fp
 8001b86:	018b      	lsls	r3, r1, #6
 8001b88:	4651      	mov	r1, sl
 8001b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8e:	4651      	mov	r1, sl
 8001b90:	018a      	lsls	r2, r1, #6
 8001b92:	4651      	mov	r1, sl
 8001b94:	ebb2 0801 	subs.w	r8, r2, r1
 8001b98:	4659      	mov	r1, fp
 8001b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	eb18 0303 	adds.w	r3, r8, r3
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	eb49 0303 	adc.w	r3, r9, r3
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	024b      	lsls	r3, r1, #9
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bdc:	4621      	mov	r1, r4
 8001bde:	024a      	lsls	r2, r1, #9
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be6:	2200      	movs	r2, #0
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf0:	f7fe fb6e 	bl	80002d0 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bfc:	e058      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	2200      	movs	r2, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	4611      	mov	r1, r2
 8001c0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c18:	4642      	mov	r2, r8
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	0159      	lsls	r1, r3, #5
 8001c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2a:	0150      	lsls	r0, r2, #5
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4641      	mov	r1, r8
 8001c32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c36:	4649      	mov	r1, r9
 8001c38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c50:	ebb2 040a 	subs.w	r4, r2, sl
 8001c54:	eb63 050b 	sbc.w	r5, r3, fp
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	00eb      	lsls	r3, r5, #3
 8001c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c66:	00e2      	lsls	r2, r4, #3
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	18e3      	adds	r3, r4, r3
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	464b      	mov	r3, r9
 8001c74:	eb45 0303 	adc.w	r3, r5, r3
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c86:	4629      	mov	r1, r5
 8001c88:	028b      	lsls	r3, r1, #10
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c90:	4621      	mov	r1, r4
 8001c92:	028a      	lsls	r2, r1, #10
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	61fa      	str	r2, [r7, #28]
 8001ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca4:	f7fe fb14 	bl	80002d0 <__aeabi_uldivmod>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4613      	mov	r3, r2
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cca:	e002      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3750      	adds	r7, #80	; 0x50
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	007a1200 	.word	0x007a1200

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08003428 	.word	0x08003428

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d30:	f7ff ffdc 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0b5b      	lsrs	r3, r3, #13
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08003428 	.word	0x08003428

08001d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e03f      	b.n	8001de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fee4 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f929 	bl	8001ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b08a      	sub	sp, #40	; 0x28
 8001df2:	af02      	add	r7, sp, #8
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d17c      	bne.n	8001f08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_UART_Transmit+0x2c>
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e075      	b.n	8001f0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_UART_Transmit+0x3e>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e06e      	b.n	8001f0a <HAL_UART_Transmit+0x11c>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2221      	movs	r2, #33	; 0x21
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e42:	f7ff f85f 	bl	8000f04 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5c:	d108      	bne.n	8001e70 <HAL_UART_Transmit+0x82>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d104      	bne.n	8001e70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	e003      	b.n	8001e78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e80:	e02a      	b.n	8001ed8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f840 	bl	8001f12 <UART_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e036      	b.n	8001f0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10b      	bne.n	8001eba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	e007      	b.n	8001eca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1cf      	bne.n	8001e82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f810 	bl	8001f12 <UART_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b090      	sub	sp, #64	; 0x40
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f22:	e050      	b.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d04c      	beq.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f32:	f7fe ffe7 	bl	8000f04 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d241      	bcs.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	330c      	adds	r3, #12
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	e853 3f00 	ldrex	r3, [r3]
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	330c      	adds	r3, #12
 8001f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f62:	637a      	str	r2, [r7, #52]	; 0x34
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f6a:	e841 2300 	strex	r3, r2, [r1]
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e5      	bne.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3314      	adds	r3, #20
 8001f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	e853 3f00 	ldrex	r3, [r3]
 8001f84:	613b      	str	r3, [r7, #16]
   return(result);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3314      	adds	r3, #20
 8001f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f96:	623a      	str	r2, [r7, #32]
 8001f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9a:	69f9      	ldr	r1, [r7, #28]
 8001f9c:	6a3a      	ldr	r2, [r7, #32]
 8001f9e:	e841 2300 	strex	r3, r2, [r1]
 8001fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e5      	bne.n	8001f76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e00f      	b.n	8001fe6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2301      	moveq	r3, #1
 8001fd8:	2300      	movne	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d09f      	beq.n	8001f24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3740      	adds	r7, #64	; 0x40
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff4:	b0c0      	sub	sp, #256	; 0x100
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200c:	68d9      	ldr	r1, [r3, #12]
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	ea40 0301 	orr.w	r3, r0, r1
 8002018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	431a      	orrs	r2, r3
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	431a      	orrs	r2, r3
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002048:	f021 010c 	bic.w	r1, r1, #12
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002056:	430b      	orrs	r3, r1
 8002058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800205a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206a:	6999      	ldr	r1, [r3, #24]
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	ea40 0301 	orr.w	r3, r0, r1
 8002076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <UART_SetConfig+0x2cc>)
 8002080:	429a      	cmp	r2, r3
 8002082:	d005      	beq.n	8002090 <UART_SetConfig+0xa0>
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <UART_SetConfig+0x2d0>)
 800208c:	429a      	cmp	r2, r3
 800208e:	d104      	bne.n	800209a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002090:	f7ff fe4c 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8002094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002098:	e003      	b.n	80020a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800209a:	f7ff fe33 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 800209e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ac:	f040 810c 	bne.w	80022c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	1891      	adds	r1, r2, r2
 80020c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80020ca:	415b      	adcs	r3, r3
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020d2:	4621      	mov	r1, r4
 80020d4:	eb12 0801 	adds.w	r8, r2, r1
 80020d8:	4629      	mov	r1, r5
 80020da:	eb43 0901 	adc.w	r9, r3, r1
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020f2:	4690      	mov	r8, r2
 80020f4:	4699      	mov	r9, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	eb18 0303 	adds.w	r3, r8, r3
 80020fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002100:	462b      	mov	r3, r5
 8002102:	eb49 0303 	adc.w	r3, r9, r3
 8002106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800211a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800211e:	460b      	mov	r3, r1
 8002120:	18db      	adds	r3, r3, r3
 8002122:	653b      	str	r3, [r7, #80]	; 0x50
 8002124:	4613      	mov	r3, r2
 8002126:	eb42 0303 	adc.w	r3, r2, r3
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
 800212c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002134:	f7fe f8cc 	bl	80002d0 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4b61      	ldr	r3, [pc, #388]	; (80022c4 <UART_SetConfig+0x2d4>)
 800213e:	fba3 2302 	umull	r2, r3, r3, r2
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	011c      	lsls	r4, r3, #4
 8002146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002158:	4642      	mov	r2, r8
 800215a:	464b      	mov	r3, r9
 800215c:	1891      	adds	r1, r2, r2
 800215e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002160:	415b      	adcs	r3, r3
 8002162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002168:	4641      	mov	r1, r8
 800216a:	eb12 0a01 	adds.w	sl, r2, r1
 800216e:	4649      	mov	r1, r9
 8002170:	eb43 0b01 	adc.w	fp, r3, r1
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002188:	4692      	mov	sl, r2
 800218a:	469b      	mov	fp, r3
 800218c:	4643      	mov	r3, r8
 800218e:	eb1a 0303 	adds.w	r3, sl, r3
 8002192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002196:	464b      	mov	r3, r9
 8002198:	eb4b 0303 	adc.w	r3, fp, r3
 800219c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021b4:	460b      	mov	r3, r1
 80021b6:	18db      	adds	r3, r3, r3
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
 80021ba:	4613      	mov	r3, r2
 80021bc:	eb42 0303 	adc.w	r3, r2, r3
 80021c0:	647b      	str	r3, [r7, #68]	; 0x44
 80021c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021ca:	f7fe f881 	bl	80002d0 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <UART_SetConfig+0x2d4>)
 80021d6:	fba3 2301 	umull	r2, r3, r3, r1
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2264      	movs	r2, #100	; 0x64
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	1acb      	subs	r3, r1, r3
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <UART_SetConfig+0x2d4>)
 80021ec:	fba3 2302 	umull	r2, r3, r3, r2
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f8:	441c      	add	r4, r3
 80021fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021fe:	2200      	movs	r2, #0
 8002200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800220c:	4642      	mov	r2, r8
 800220e:	464b      	mov	r3, r9
 8002210:	1891      	adds	r1, r2, r2
 8002212:	63b9      	str	r1, [r7, #56]	; 0x38
 8002214:	415b      	adcs	r3, r3
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800221c:	4641      	mov	r1, r8
 800221e:	1851      	adds	r1, r2, r1
 8002220:	6339      	str	r1, [r7, #48]	; 0x30
 8002222:	4649      	mov	r1, r9
 8002224:	414b      	adcs	r3, r1
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002234:	4659      	mov	r1, fp
 8002236:	00cb      	lsls	r3, r1, #3
 8002238:	4651      	mov	r1, sl
 800223a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223e:	4651      	mov	r1, sl
 8002240:	00ca      	lsls	r2, r1, #3
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	4603      	mov	r3, r0
 8002248:	4642      	mov	r2, r8
 800224a:	189b      	adds	r3, r3, r2
 800224c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002250:	464b      	mov	r3, r9
 8002252:	460a      	mov	r2, r1
 8002254:	eb42 0303 	adc.w	r3, r2, r3
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800226c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002270:	460b      	mov	r3, r1
 8002272:	18db      	adds	r3, r3, r3
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
 8002276:	4613      	mov	r3, r2
 8002278:	eb42 0303 	adc.w	r3, r2, r3
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002286:	f7fe f823 	bl	80002d0 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <UART_SetConfig+0x2d4>)
 8002290:	fba3 1302 	umull	r1, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	2164      	movs	r1, #100	; 0x64
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	3332      	adds	r3, #50	; 0x32
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <UART_SetConfig+0x2d4>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	f003 0207 	and.w	r2, r3, #7
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4422      	add	r2, r4
 80022b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022b8:	e106      	b.n	80024c8 <UART_SetConfig+0x4d8>
 80022ba:	bf00      	nop
 80022bc:	40011000 	.word	0x40011000
 80022c0:	40011400 	.word	0x40011400
 80022c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022cc:	2200      	movs	r2, #0
 80022ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022da:	4642      	mov	r2, r8
 80022dc:	464b      	mov	r3, r9
 80022de:	1891      	adds	r1, r2, r2
 80022e0:	6239      	str	r1, [r7, #32]
 80022e2:	415b      	adcs	r3, r3
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ea:	4641      	mov	r1, r8
 80022ec:	1854      	adds	r4, r2, r1
 80022ee:	4649      	mov	r1, r9
 80022f0:	eb43 0501 	adc.w	r5, r3, r1
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	00eb      	lsls	r3, r5, #3
 80022fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	4643      	mov	r3, r8
 800230a:	18e3      	adds	r3, r4, r3
 800230c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002310:	464b      	mov	r3, r9
 8002312:	eb45 0303 	adc.w	r3, r5, r3
 8002316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002336:	4629      	mov	r1, r5
 8002338:	008b      	lsls	r3, r1, #2
 800233a:	4621      	mov	r1, r4
 800233c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002340:	4621      	mov	r1, r4
 8002342:	008a      	lsls	r2, r1, #2
 8002344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002348:	f7fd ffc2 	bl	80002d0 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <UART_SetConfig+0x4e4>)
 8002352:	fba3 2302 	umull	r2, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	011c      	lsls	r4, r3, #4
 800235a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235e:	2200      	movs	r2, #0
 8002360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800236c:	4642      	mov	r2, r8
 800236e:	464b      	mov	r3, r9
 8002370:	1891      	adds	r1, r2, r2
 8002372:	61b9      	str	r1, [r7, #24]
 8002374:	415b      	adcs	r3, r3
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800237c:	4641      	mov	r1, r8
 800237e:	1851      	adds	r1, r2, r1
 8002380:	6139      	str	r1, [r7, #16]
 8002382:	4649      	mov	r1, r9
 8002384:	414b      	adcs	r3, r1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002394:	4659      	mov	r1, fp
 8002396:	00cb      	lsls	r3, r1, #3
 8002398:	4651      	mov	r1, sl
 800239a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800239e:	4651      	mov	r1, sl
 80023a0:	00ca      	lsls	r2, r1, #3
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	4642      	mov	r2, r8
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023b0:	464b      	mov	r3, r9
 80023b2:	460a      	mov	r2, r1
 80023b4:	eb42 0303 	adc.w	r3, r2, r3
 80023b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80023c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023d4:	4649      	mov	r1, r9
 80023d6:	008b      	lsls	r3, r1, #2
 80023d8:	4641      	mov	r1, r8
 80023da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023de:	4641      	mov	r1, r8
 80023e0:	008a      	lsls	r2, r1, #2
 80023e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023e6:	f7fd ff73 	bl	80002d0 <__aeabi_uldivmod>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <UART_SetConfig+0x4e4>)
 80023f2:	fba3 2301 	umull	r2, r3, r3, r1
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2264      	movs	r2, #100	; 0x64
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	1acb      	subs	r3, r1, r3
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	3332      	adds	r3, #50	; 0x32
 8002404:	4a33      	ldr	r2, [pc, #204]	; (80024d4 <UART_SetConfig+0x4e4>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002410:	441c      	add	r4, r3
 8002412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002416:	2200      	movs	r2, #0
 8002418:	673b      	str	r3, [r7, #112]	; 0x70
 800241a:	677a      	str	r2, [r7, #116]	; 0x74
 800241c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002420:	4642      	mov	r2, r8
 8002422:	464b      	mov	r3, r9
 8002424:	1891      	adds	r1, r2, r2
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	415b      	adcs	r3, r3
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002430:	4641      	mov	r1, r8
 8002432:	1851      	adds	r1, r2, r1
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	4649      	mov	r1, r9
 8002438:	414b      	adcs	r3, r1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002448:	4659      	mov	r1, fp
 800244a:	00cb      	lsls	r3, r1, #3
 800244c:	4651      	mov	r1, sl
 800244e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002452:	4651      	mov	r1, sl
 8002454:	00ca      	lsls	r2, r1, #3
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	4603      	mov	r3, r0
 800245c:	4642      	mov	r2, r8
 800245e:	189b      	adds	r3, r3, r2
 8002460:	66bb      	str	r3, [r7, #104]	; 0x68
 8002462:	464b      	mov	r3, r9
 8002464:	460a      	mov	r2, r1
 8002466:	eb42 0303 	adc.w	r3, r2, r3
 800246a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	663b      	str	r3, [r7, #96]	; 0x60
 8002476:	667a      	str	r2, [r7, #100]	; 0x64
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002484:	4649      	mov	r1, r9
 8002486:	008b      	lsls	r3, r1, #2
 8002488:	4641      	mov	r1, r8
 800248a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800248e:	4641      	mov	r1, r8
 8002490:	008a      	lsls	r2, r1, #2
 8002492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002496:	f7fd ff1b 	bl	80002d0 <__aeabi_uldivmod>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <UART_SetConfig+0x4e4>)
 80024a0:	fba3 1302 	umull	r1, r3, r3, r2
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	2164      	movs	r1, #100	; 0x64
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	3332      	adds	r3, #50	; 0x32
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <UART_SetConfig+0x4e4>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4422      	add	r2, r4
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024ce:	46bd      	mov	sp, r7
 80024d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <std>:
 80024d8:	2300      	movs	r3, #0
 80024da:	b510      	push	{r4, lr}
 80024dc:	4604      	mov	r4, r0
 80024de:	e9c0 3300 	strd	r3, r3, [r0]
 80024e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024e6:	6083      	str	r3, [r0, #8]
 80024e8:	8181      	strh	r1, [r0, #12]
 80024ea:	6643      	str	r3, [r0, #100]	; 0x64
 80024ec:	81c2      	strh	r2, [r0, #14]
 80024ee:	6183      	str	r3, [r0, #24]
 80024f0:	4619      	mov	r1, r3
 80024f2:	2208      	movs	r2, #8
 80024f4:	305c      	adds	r0, #92	; 0x5c
 80024f6:	f000 f9e5 	bl	80028c4 <memset>
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <std+0x38>)
 80024fc:	6263      	str	r3, [r4, #36]	; 0x24
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <std+0x3c>)
 8002500:	62a3      	str	r3, [r4, #40]	; 0x28
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <std+0x40>)
 8002504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <std+0x44>)
 8002508:	6224      	str	r4, [r4, #32]
 800250a:	6323      	str	r3, [r4, #48]	; 0x30
 800250c:	bd10      	pop	{r4, pc}
 800250e:	bf00      	nop
 8002510:	08002715 	.word	0x08002715
 8002514:	08002737 	.word	0x08002737
 8002518:	0800276f 	.word	0x0800276f
 800251c:	08002793 	.word	0x08002793

08002520 <stdio_exit_handler>:
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <stdio_exit_handler+0xc>)
 8002522:	4903      	ldr	r1, [pc, #12]	; (8002530 <stdio_exit_handler+0x10>)
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <stdio_exit_handler+0x14>)
 8002526:	f000 b869 	b.w	80025fc <_fwalk_sglue>
 800252a:	bf00      	nop
 800252c:	20000014 	.word	0x20000014
 8002530:	0800325d 	.word	0x0800325d
 8002534:	20000020 	.word	0x20000020

08002538 <cleanup_stdio>:
 8002538:	6841      	ldr	r1, [r0, #4]
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <cleanup_stdio+0x34>)
 800253c:	4299      	cmp	r1, r3
 800253e:	b510      	push	{r4, lr}
 8002540:	4604      	mov	r4, r0
 8002542:	d001      	beq.n	8002548 <cleanup_stdio+0x10>
 8002544:	f000 fe8a 	bl	800325c <_fflush_r>
 8002548:	68a1      	ldr	r1, [r4, #8]
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <cleanup_stdio+0x38>)
 800254c:	4299      	cmp	r1, r3
 800254e:	d002      	beq.n	8002556 <cleanup_stdio+0x1e>
 8002550:	4620      	mov	r0, r4
 8002552:	f000 fe83 	bl	800325c <_fflush_r>
 8002556:	68e1      	ldr	r1, [r4, #12]
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <cleanup_stdio+0x3c>)
 800255a:	4299      	cmp	r1, r3
 800255c:	d004      	beq.n	8002568 <cleanup_stdio+0x30>
 800255e:	4620      	mov	r0, r4
 8002560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002564:	f000 be7a 	b.w	800325c <_fflush_r>
 8002568:	bd10      	pop	{r4, pc}
 800256a:	bf00      	nop
 800256c:	200001e4 	.word	0x200001e4
 8002570:	2000024c 	.word	0x2000024c
 8002574:	200002b4 	.word	0x200002b4

08002578 <global_stdio_init.part.0>:
 8002578:	b510      	push	{r4, lr}
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <global_stdio_init.part.0+0x30>)
 800257c:	4c0b      	ldr	r4, [pc, #44]	; (80025ac <global_stdio_init.part.0+0x34>)
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <global_stdio_init.part.0+0x38>)
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4620      	mov	r0, r4
 8002584:	2200      	movs	r2, #0
 8002586:	2104      	movs	r1, #4
 8002588:	f7ff ffa6 	bl	80024d8 <std>
 800258c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002590:	2201      	movs	r2, #1
 8002592:	2109      	movs	r1, #9
 8002594:	f7ff ffa0 	bl	80024d8 <std>
 8002598:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800259c:	2202      	movs	r2, #2
 800259e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a2:	2112      	movs	r1, #18
 80025a4:	f7ff bf98 	b.w	80024d8 <std>
 80025a8:	2000031c 	.word	0x2000031c
 80025ac:	200001e4 	.word	0x200001e4
 80025b0:	08002521 	.word	0x08002521

080025b4 <__sfp_lock_acquire>:
 80025b4:	4801      	ldr	r0, [pc, #4]	; (80025bc <__sfp_lock_acquire+0x8>)
 80025b6:	f000 b9fd 	b.w	80029b4 <__retarget_lock_acquire_recursive>
 80025ba:	bf00      	nop
 80025bc:	20000325 	.word	0x20000325

080025c0 <__sfp_lock_release>:
 80025c0:	4801      	ldr	r0, [pc, #4]	; (80025c8 <__sfp_lock_release+0x8>)
 80025c2:	f000 b9f8 	b.w	80029b6 <__retarget_lock_release_recursive>
 80025c6:	bf00      	nop
 80025c8:	20000325 	.word	0x20000325

080025cc <__sinit>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	4604      	mov	r4, r0
 80025d0:	f7ff fff0 	bl	80025b4 <__sfp_lock_acquire>
 80025d4:	6a23      	ldr	r3, [r4, #32]
 80025d6:	b11b      	cbz	r3, 80025e0 <__sinit+0x14>
 80025d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025dc:	f7ff bff0 	b.w	80025c0 <__sfp_lock_release>
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__sinit+0x28>)
 80025e2:	6223      	str	r3, [r4, #32]
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__sinit+0x2c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f5      	bne.n	80025d8 <__sinit+0xc>
 80025ec:	f7ff ffc4 	bl	8002578 <global_stdio_init.part.0>
 80025f0:	e7f2      	b.n	80025d8 <__sinit+0xc>
 80025f2:	bf00      	nop
 80025f4:	08002539 	.word	0x08002539
 80025f8:	2000031c 	.word	0x2000031c

080025fc <_fwalk_sglue>:
 80025fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002600:	4607      	mov	r7, r0
 8002602:	4688      	mov	r8, r1
 8002604:	4614      	mov	r4, r2
 8002606:	2600      	movs	r6, #0
 8002608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800260c:	f1b9 0901 	subs.w	r9, r9, #1
 8002610:	d505      	bpl.n	800261e <_fwalk_sglue+0x22>
 8002612:	6824      	ldr	r4, [r4, #0]
 8002614:	2c00      	cmp	r4, #0
 8002616:	d1f7      	bne.n	8002608 <_fwalk_sglue+0xc>
 8002618:	4630      	mov	r0, r6
 800261a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800261e:	89ab      	ldrh	r3, [r5, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d907      	bls.n	8002634 <_fwalk_sglue+0x38>
 8002624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002628:	3301      	adds	r3, #1
 800262a:	d003      	beq.n	8002634 <_fwalk_sglue+0x38>
 800262c:	4629      	mov	r1, r5
 800262e:	4638      	mov	r0, r7
 8002630:	47c0      	blx	r8
 8002632:	4306      	orrs	r6, r0
 8002634:	3568      	adds	r5, #104	; 0x68
 8002636:	e7e9      	b.n	800260c <_fwalk_sglue+0x10>

08002638 <iprintf>:
 8002638:	b40f      	push	{r0, r1, r2, r3}
 800263a:	b507      	push	{r0, r1, r2, lr}
 800263c:	4906      	ldr	r1, [pc, #24]	; (8002658 <iprintf+0x20>)
 800263e:	ab04      	add	r3, sp, #16
 8002640:	6808      	ldr	r0, [r1, #0]
 8002642:	f853 2b04 	ldr.w	r2, [r3], #4
 8002646:	6881      	ldr	r1, [r0, #8]
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	f000 fad7 	bl	8002bfc <_vfiprintf_r>
 800264e:	b003      	add	sp, #12
 8002650:	f85d eb04 	ldr.w	lr, [sp], #4
 8002654:	b004      	add	sp, #16
 8002656:	4770      	bx	lr
 8002658:	2000006c 	.word	0x2000006c

0800265c <_puts_r>:
 800265c:	6a03      	ldr	r3, [r0, #32]
 800265e:	b570      	push	{r4, r5, r6, lr}
 8002660:	6884      	ldr	r4, [r0, #8]
 8002662:	4605      	mov	r5, r0
 8002664:	460e      	mov	r6, r1
 8002666:	b90b      	cbnz	r3, 800266c <_puts_r+0x10>
 8002668:	f7ff ffb0 	bl	80025cc <__sinit>
 800266c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800266e:	07db      	lsls	r3, r3, #31
 8002670:	d405      	bmi.n	800267e <_puts_r+0x22>
 8002672:	89a3      	ldrh	r3, [r4, #12]
 8002674:	0598      	lsls	r0, r3, #22
 8002676:	d402      	bmi.n	800267e <_puts_r+0x22>
 8002678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800267a:	f000 f99b 	bl	80029b4 <__retarget_lock_acquire_recursive>
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	0719      	lsls	r1, r3, #28
 8002682:	d513      	bpl.n	80026ac <_puts_r+0x50>
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	b18b      	cbz	r3, 80026ac <_puts_r+0x50>
 8002688:	3e01      	subs	r6, #1
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002690:	3b01      	subs	r3, #1
 8002692:	60a3      	str	r3, [r4, #8]
 8002694:	b9e9      	cbnz	r1, 80026d2 <_puts_r+0x76>
 8002696:	2b00      	cmp	r3, #0
 8002698:	da2e      	bge.n	80026f8 <_puts_r+0x9c>
 800269a:	4622      	mov	r2, r4
 800269c:	210a      	movs	r1, #10
 800269e:	4628      	mov	r0, r5
 80026a0:	f000 f87b 	bl	800279a <__swbuf_r>
 80026a4:	3001      	adds	r0, #1
 80026a6:	d007      	beq.n	80026b8 <_puts_r+0x5c>
 80026a8:	250a      	movs	r5, #10
 80026aa:	e007      	b.n	80026bc <_puts_r+0x60>
 80026ac:	4621      	mov	r1, r4
 80026ae:	4628      	mov	r0, r5
 80026b0:	f000 f8b0 	bl	8002814 <__swsetup_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d0e7      	beq.n	8002688 <_puts_r+0x2c>
 80026b8:	f04f 35ff 	mov.w	r5, #4294967295
 80026bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026be:	07da      	lsls	r2, r3, #31
 80026c0:	d405      	bmi.n	80026ce <_puts_r+0x72>
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	059b      	lsls	r3, r3, #22
 80026c6:	d402      	bmi.n	80026ce <_puts_r+0x72>
 80026c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ca:	f000 f974 	bl	80029b6 <__retarget_lock_release_recursive>
 80026ce:	4628      	mov	r0, r5
 80026d0:	bd70      	pop	{r4, r5, r6, pc}
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da04      	bge.n	80026e0 <_puts_r+0x84>
 80026d6:	69a2      	ldr	r2, [r4, #24]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dc06      	bgt.n	80026ea <_puts_r+0x8e>
 80026dc:	290a      	cmp	r1, #10
 80026de:	d004      	beq.n	80026ea <_puts_r+0x8e>
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	6022      	str	r2, [r4, #0]
 80026e6:	7019      	strb	r1, [r3, #0]
 80026e8:	e7cf      	b.n	800268a <_puts_r+0x2e>
 80026ea:	4622      	mov	r2, r4
 80026ec:	4628      	mov	r0, r5
 80026ee:	f000 f854 	bl	800279a <__swbuf_r>
 80026f2:	3001      	adds	r0, #1
 80026f4:	d1c9      	bne.n	800268a <_puts_r+0x2e>
 80026f6:	e7df      	b.n	80026b8 <_puts_r+0x5c>
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	250a      	movs	r5, #10
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	6022      	str	r2, [r4, #0]
 8002700:	701d      	strb	r5, [r3, #0]
 8002702:	e7db      	b.n	80026bc <_puts_r+0x60>

08002704 <puts>:
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <puts+0xc>)
 8002706:	4601      	mov	r1, r0
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f7ff bfa7 	b.w	800265c <_puts_r>
 800270e:	bf00      	nop
 8002710:	2000006c 	.word	0x2000006c

08002714 <__sread>:
 8002714:	b510      	push	{r4, lr}
 8002716:	460c      	mov	r4, r1
 8002718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800271c:	f000 f8fc 	bl	8002918 <_read_r>
 8002720:	2800      	cmp	r0, #0
 8002722:	bfab      	itete	ge
 8002724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002726:	89a3      	ldrhlt	r3, [r4, #12]
 8002728:	181b      	addge	r3, r3, r0
 800272a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800272e:	bfac      	ite	ge
 8002730:	6563      	strge	r3, [r4, #84]	; 0x54
 8002732:	81a3      	strhlt	r3, [r4, #12]
 8002734:	bd10      	pop	{r4, pc}

08002736 <__swrite>:
 8002736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273a:	461f      	mov	r7, r3
 800273c:	898b      	ldrh	r3, [r1, #12]
 800273e:	05db      	lsls	r3, r3, #23
 8002740:	4605      	mov	r5, r0
 8002742:	460c      	mov	r4, r1
 8002744:	4616      	mov	r6, r2
 8002746:	d505      	bpl.n	8002754 <__swrite+0x1e>
 8002748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274c:	2302      	movs	r3, #2
 800274e:	2200      	movs	r2, #0
 8002750:	f000 f8d0 	bl	80028f4 <_lseek_r>
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800275a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800275e:	81a3      	strh	r3, [r4, #12]
 8002760:	4632      	mov	r2, r6
 8002762:	463b      	mov	r3, r7
 8002764:	4628      	mov	r0, r5
 8002766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800276a:	f000 b8e7 	b.w	800293c <_write_r>

0800276e <__sseek>:
 800276e:	b510      	push	{r4, lr}
 8002770:	460c      	mov	r4, r1
 8002772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002776:	f000 f8bd 	bl	80028f4 <_lseek_r>
 800277a:	1c43      	adds	r3, r0, #1
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	bf15      	itete	ne
 8002780:	6560      	strne	r0, [r4, #84]	; 0x54
 8002782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800278a:	81a3      	strheq	r3, [r4, #12]
 800278c:	bf18      	it	ne
 800278e:	81a3      	strhne	r3, [r4, #12]
 8002790:	bd10      	pop	{r4, pc}

08002792 <__sclose>:
 8002792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002796:	f000 b89d 	b.w	80028d4 <_close_r>

0800279a <__swbuf_r>:
 800279a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279c:	460e      	mov	r6, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	4605      	mov	r5, r0
 80027a2:	b118      	cbz	r0, 80027ac <__swbuf_r+0x12>
 80027a4:	6a03      	ldr	r3, [r0, #32]
 80027a6:	b90b      	cbnz	r3, 80027ac <__swbuf_r+0x12>
 80027a8:	f7ff ff10 	bl	80025cc <__sinit>
 80027ac:	69a3      	ldr	r3, [r4, #24]
 80027ae:	60a3      	str	r3, [r4, #8]
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	071a      	lsls	r2, r3, #28
 80027b4:	d525      	bpl.n	8002802 <__swbuf_r+0x68>
 80027b6:	6923      	ldr	r3, [r4, #16]
 80027b8:	b31b      	cbz	r3, 8002802 <__swbuf_r+0x68>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	6922      	ldr	r2, [r4, #16]
 80027be:	1a98      	subs	r0, r3, r2
 80027c0:	6963      	ldr	r3, [r4, #20]
 80027c2:	b2f6      	uxtb	r6, r6
 80027c4:	4283      	cmp	r3, r0
 80027c6:	4637      	mov	r7, r6
 80027c8:	dc04      	bgt.n	80027d4 <__swbuf_r+0x3a>
 80027ca:	4621      	mov	r1, r4
 80027cc:	4628      	mov	r0, r5
 80027ce:	f000 fd45 	bl	800325c <_fflush_r>
 80027d2:	b9e0      	cbnz	r0, 800280e <__swbuf_r+0x74>
 80027d4:	68a3      	ldr	r3, [r4, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	701e      	strb	r6, [r3, #0]
 80027e2:	6962      	ldr	r2, [r4, #20]
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d004      	beq.n	80027f4 <__swbuf_r+0x5a>
 80027ea:	89a3      	ldrh	r3, [r4, #12]
 80027ec:	07db      	lsls	r3, r3, #31
 80027ee:	d506      	bpl.n	80027fe <__swbuf_r+0x64>
 80027f0:	2e0a      	cmp	r6, #10
 80027f2:	d104      	bne.n	80027fe <__swbuf_r+0x64>
 80027f4:	4621      	mov	r1, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f000 fd30 	bl	800325c <_fflush_r>
 80027fc:	b938      	cbnz	r0, 800280e <__swbuf_r+0x74>
 80027fe:	4638      	mov	r0, r7
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f805 	bl	8002814 <__swsetup_r>
 800280a:	2800      	cmp	r0, #0
 800280c:	d0d5      	beq.n	80027ba <__swbuf_r+0x20>
 800280e:	f04f 37ff 	mov.w	r7, #4294967295
 8002812:	e7f4      	b.n	80027fe <__swbuf_r+0x64>

08002814 <__swsetup_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <__swsetup_r+0xac>)
 8002818:	4605      	mov	r5, r0
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	460c      	mov	r4, r1
 800281e:	b118      	cbz	r0, 8002828 <__swsetup_r+0x14>
 8002820:	6a03      	ldr	r3, [r0, #32]
 8002822:	b90b      	cbnz	r3, 8002828 <__swsetup_r+0x14>
 8002824:	f7ff fed2 	bl	80025cc <__sinit>
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800282e:	0718      	lsls	r0, r3, #28
 8002830:	d422      	bmi.n	8002878 <__swsetup_r+0x64>
 8002832:	06d9      	lsls	r1, r3, #27
 8002834:	d407      	bmi.n	8002846 <__swsetup_r+0x32>
 8002836:	2309      	movs	r3, #9
 8002838:	602b      	str	r3, [r5, #0]
 800283a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800283e:	81a3      	strh	r3, [r4, #12]
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	e034      	b.n	80028b0 <__swsetup_r+0x9c>
 8002846:	0758      	lsls	r0, r3, #29
 8002848:	d512      	bpl.n	8002870 <__swsetup_r+0x5c>
 800284a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800284c:	b141      	cbz	r1, 8002860 <__swsetup_r+0x4c>
 800284e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002852:	4299      	cmp	r1, r3
 8002854:	d002      	beq.n	800285c <__swsetup_r+0x48>
 8002856:	4628      	mov	r0, r5
 8002858:	f000 f8ae 	bl	80029b8 <_free_r>
 800285c:	2300      	movs	r3, #0
 800285e:	6363      	str	r3, [r4, #52]	; 0x34
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	2300      	movs	r3, #0
 800286a:	6063      	str	r3, [r4, #4]
 800286c:	6923      	ldr	r3, [r4, #16]
 800286e:	6023      	str	r3, [r4, #0]
 8002870:	89a3      	ldrh	r3, [r4, #12]
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	81a3      	strh	r3, [r4, #12]
 8002878:	6923      	ldr	r3, [r4, #16]
 800287a:	b94b      	cbnz	r3, 8002890 <__swsetup_r+0x7c>
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002886:	d003      	beq.n	8002890 <__swsetup_r+0x7c>
 8002888:	4621      	mov	r1, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f000 fd34 	bl	80032f8 <__smakebuf_r>
 8002890:	89a0      	ldrh	r0, [r4, #12]
 8002892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002896:	f010 0301 	ands.w	r3, r0, #1
 800289a:	d00a      	beq.n	80028b2 <__swsetup_r+0x9e>
 800289c:	2300      	movs	r3, #0
 800289e:	60a3      	str	r3, [r4, #8]
 80028a0:	6963      	ldr	r3, [r4, #20]
 80028a2:	425b      	negs	r3, r3
 80028a4:	61a3      	str	r3, [r4, #24]
 80028a6:	6923      	ldr	r3, [r4, #16]
 80028a8:	b943      	cbnz	r3, 80028bc <__swsetup_r+0xa8>
 80028aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028ae:	d1c4      	bne.n	800283a <__swsetup_r+0x26>
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
 80028b2:	0781      	lsls	r1, r0, #30
 80028b4:	bf58      	it	pl
 80028b6:	6963      	ldrpl	r3, [r4, #20]
 80028b8:	60a3      	str	r3, [r4, #8]
 80028ba:	e7f4      	b.n	80028a6 <__swsetup_r+0x92>
 80028bc:	2000      	movs	r0, #0
 80028be:	e7f7      	b.n	80028b0 <__swsetup_r+0x9c>
 80028c0:	2000006c 	.word	0x2000006c

080028c4 <memset>:
 80028c4:	4402      	add	r2, r0
 80028c6:	4603      	mov	r3, r0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	f803 1b01 	strb.w	r1, [r3], #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <_close_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4d06      	ldr	r5, [pc, #24]	; (80028f0 <_close_r+0x1c>)
 80028d8:	2300      	movs	r3, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	f7fe fa03 	bl	8000cea <_close>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d102      	bne.n	80028ee <_close_r+0x1a>
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	b103      	cbz	r3, 80028ee <_close_r+0x1a>
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	20000320 	.word	0x20000320

080028f4 <_lseek_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4d07      	ldr	r5, [pc, #28]	; (8002914 <_lseek_r+0x20>)
 80028f8:	4604      	mov	r4, r0
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	2200      	movs	r2, #0
 8002900:	602a      	str	r2, [r5, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f7fe fa18 	bl	8000d38 <_lseek>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	d102      	bne.n	8002912 <_lseek_r+0x1e>
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	b103      	cbz	r3, 8002912 <_lseek_r+0x1e>
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	bd38      	pop	{r3, r4, r5, pc}
 8002914:	20000320 	.word	0x20000320

08002918 <_read_r>:
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	4d07      	ldr	r5, [pc, #28]	; (8002938 <_read_r+0x20>)
 800291c:	4604      	mov	r4, r0
 800291e:	4608      	mov	r0, r1
 8002920:	4611      	mov	r1, r2
 8002922:	2200      	movs	r2, #0
 8002924:	602a      	str	r2, [r5, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	f7fe f9a6 	bl	8000c78 <_read>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d102      	bne.n	8002936 <_read_r+0x1e>
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	b103      	cbz	r3, 8002936 <_read_r+0x1e>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	bd38      	pop	{r3, r4, r5, pc}
 8002938:	20000320 	.word	0x20000320

0800293c <_write_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4d07      	ldr	r5, [pc, #28]	; (800295c <_write_r+0x20>)
 8002940:	4604      	mov	r4, r0
 8002942:	4608      	mov	r0, r1
 8002944:	4611      	mov	r1, r2
 8002946:	2200      	movs	r2, #0
 8002948:	602a      	str	r2, [r5, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	f7fe f9b1 	bl	8000cb2 <_write>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d102      	bne.n	800295a <_write_r+0x1e>
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	b103      	cbz	r3, 800295a <_write_r+0x1e>
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	20000320 	.word	0x20000320

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000006c 	.word	0x2000006c

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	4d0d      	ldr	r5, [pc, #52]	; (80029a4 <__libc_init_array+0x38>)
 8002970:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002972:	1b64      	subs	r4, r4, r5
 8002974:	10a4      	asrs	r4, r4, #2
 8002976:	2600      	movs	r6, #0
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	4d0b      	ldr	r5, [pc, #44]	; (80029ac <__libc_init_array+0x40>)
 800297e:	4c0c      	ldr	r4, [pc, #48]	; (80029b0 <__libc_init_array+0x44>)
 8002980:	f000 fd28 	bl	80033d4 <_init>
 8002984:	1b64      	subs	r4, r4, r5
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	2600      	movs	r6, #0
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	0800346c 	.word	0x0800346c
 80029a8:	0800346c 	.word	0x0800346c
 80029ac:	0800346c 	.word	0x0800346c
 80029b0:	08003470 	.word	0x08003470

080029b4 <__retarget_lock_acquire_recursive>:
 80029b4:	4770      	bx	lr

080029b6 <__retarget_lock_release_recursive>:
 80029b6:	4770      	bx	lr

080029b8 <_free_r>:
 80029b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d044      	beq.n	8002a48 <_free_r+0x90>
 80029be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c2:	9001      	str	r0, [sp, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f1a1 0404 	sub.w	r4, r1, #4
 80029ca:	bfb8      	it	lt
 80029cc:	18e4      	addlt	r4, r4, r3
 80029ce:	f000 f8df 	bl	8002b90 <__malloc_lock>
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <_free_r+0x94>)
 80029d4:	9801      	ldr	r0, [sp, #4]
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	b933      	cbnz	r3, 80029e8 <_free_r+0x30>
 80029da:	6063      	str	r3, [r4, #4]
 80029dc:	6014      	str	r4, [r2, #0]
 80029de:	b003      	add	sp, #12
 80029e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029e4:	f000 b8da 	b.w	8002b9c <__malloc_unlock>
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d908      	bls.n	80029fe <_free_r+0x46>
 80029ec:	6825      	ldr	r5, [r4, #0]
 80029ee:	1961      	adds	r1, r4, r5
 80029f0:	428b      	cmp	r3, r1
 80029f2:	bf01      	itttt	eq
 80029f4:	6819      	ldreq	r1, [r3, #0]
 80029f6:	685b      	ldreq	r3, [r3, #4]
 80029f8:	1949      	addeq	r1, r1, r5
 80029fa:	6021      	streq	r1, [r4, #0]
 80029fc:	e7ed      	b.n	80029da <_free_r+0x22>
 80029fe:	461a      	mov	r2, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b10b      	cbz	r3, 8002a08 <_free_r+0x50>
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	d9fa      	bls.n	80029fe <_free_r+0x46>
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	1855      	adds	r5, r2, r1
 8002a0c:	42a5      	cmp	r5, r4
 8002a0e:	d10b      	bne.n	8002a28 <_free_r+0x70>
 8002a10:	6824      	ldr	r4, [r4, #0]
 8002a12:	4421      	add	r1, r4
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	42a3      	cmp	r3, r4
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	d1e0      	bne.n	80029de <_free_r+0x26>
 8002a1c:	681c      	ldr	r4, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	6053      	str	r3, [r2, #4]
 8002a22:	440c      	add	r4, r1
 8002a24:	6014      	str	r4, [r2, #0]
 8002a26:	e7da      	b.n	80029de <_free_r+0x26>
 8002a28:	d902      	bls.n	8002a30 <_free_r+0x78>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	6003      	str	r3, [r0, #0]
 8002a2e:	e7d6      	b.n	80029de <_free_r+0x26>
 8002a30:	6825      	ldr	r5, [r4, #0]
 8002a32:	1961      	adds	r1, r4, r5
 8002a34:	428b      	cmp	r3, r1
 8002a36:	bf04      	itt	eq
 8002a38:	6819      	ldreq	r1, [r3, #0]
 8002a3a:	685b      	ldreq	r3, [r3, #4]
 8002a3c:	6063      	str	r3, [r4, #4]
 8002a3e:	bf04      	itt	eq
 8002a40:	1949      	addeq	r1, r1, r5
 8002a42:	6021      	streq	r1, [r4, #0]
 8002a44:	6054      	str	r4, [r2, #4]
 8002a46:	e7ca      	b.n	80029de <_free_r+0x26>
 8002a48:	b003      	add	sp, #12
 8002a4a:	bd30      	pop	{r4, r5, pc}
 8002a4c:	20000328 	.word	0x20000328

08002a50 <sbrk_aligned>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	4e0e      	ldr	r6, [pc, #56]	; (8002a8c <sbrk_aligned+0x3c>)
 8002a54:	460c      	mov	r4, r1
 8002a56:	6831      	ldr	r1, [r6, #0]
 8002a58:	4605      	mov	r5, r0
 8002a5a:	b911      	cbnz	r1, 8002a62 <sbrk_aligned+0x12>
 8002a5c:	f000 fcaa 	bl	80033b4 <_sbrk_r>
 8002a60:	6030      	str	r0, [r6, #0]
 8002a62:	4621      	mov	r1, r4
 8002a64:	4628      	mov	r0, r5
 8002a66:	f000 fca5 	bl	80033b4 <_sbrk_r>
 8002a6a:	1c43      	adds	r3, r0, #1
 8002a6c:	d00a      	beq.n	8002a84 <sbrk_aligned+0x34>
 8002a6e:	1cc4      	adds	r4, r0, #3
 8002a70:	f024 0403 	bic.w	r4, r4, #3
 8002a74:	42a0      	cmp	r0, r4
 8002a76:	d007      	beq.n	8002a88 <sbrk_aligned+0x38>
 8002a78:	1a21      	subs	r1, r4, r0
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f000 fc9a 	bl	80033b4 <_sbrk_r>
 8002a80:	3001      	adds	r0, #1
 8002a82:	d101      	bne.n	8002a88 <sbrk_aligned+0x38>
 8002a84:	f04f 34ff 	mov.w	r4, #4294967295
 8002a88:	4620      	mov	r0, r4
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	2000032c 	.word	0x2000032c

08002a90 <_malloc_r>:
 8002a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a94:	1ccd      	adds	r5, r1, #3
 8002a96:	f025 0503 	bic.w	r5, r5, #3
 8002a9a:	3508      	adds	r5, #8
 8002a9c:	2d0c      	cmp	r5, #12
 8002a9e:	bf38      	it	cc
 8002aa0:	250c      	movcc	r5, #12
 8002aa2:	2d00      	cmp	r5, #0
 8002aa4:	4607      	mov	r7, r0
 8002aa6:	db01      	blt.n	8002aac <_malloc_r+0x1c>
 8002aa8:	42a9      	cmp	r1, r5
 8002aaa:	d905      	bls.n	8002ab8 <_malloc_r+0x28>
 8002aac:	230c      	movs	r3, #12
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ab8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b8c <_malloc_r+0xfc>
 8002abc:	f000 f868 	bl	8002b90 <__malloc_lock>
 8002ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac4:	461c      	mov	r4, r3
 8002ac6:	bb5c      	cbnz	r4, 8002b20 <_malloc_r+0x90>
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4638      	mov	r0, r7
 8002acc:	f7ff ffc0 	bl	8002a50 <sbrk_aligned>
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	d155      	bne.n	8002b82 <_malloc_r+0xf2>
 8002ad6:	f8d8 4000 	ldr.w	r4, [r8]
 8002ada:	4626      	mov	r6, r4
 8002adc:	2e00      	cmp	r6, #0
 8002ade:	d145      	bne.n	8002b6c <_malloc_r+0xdc>
 8002ae0:	2c00      	cmp	r4, #0
 8002ae2:	d048      	beq.n	8002b76 <_malloc_r+0xe6>
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	4638      	mov	r0, r7
 8002aea:	eb04 0903 	add.w	r9, r4, r3
 8002aee:	f000 fc61 	bl	80033b4 <_sbrk_r>
 8002af2:	4581      	cmp	r9, r0
 8002af4:	d13f      	bne.n	8002b76 <_malloc_r+0xe6>
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	1a6d      	subs	r5, r5, r1
 8002afa:	4629      	mov	r1, r5
 8002afc:	4638      	mov	r0, r7
 8002afe:	f7ff ffa7 	bl	8002a50 <sbrk_aligned>
 8002b02:	3001      	adds	r0, #1
 8002b04:	d037      	beq.n	8002b76 <_malloc_r+0xe6>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	442b      	add	r3, r5
 8002b0a:	6023      	str	r3, [r4, #0]
 8002b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d038      	beq.n	8002b86 <_malloc_r+0xf6>
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	42a2      	cmp	r2, r4
 8002b18:	d12b      	bne.n	8002b72 <_malloc_r+0xe2>
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	e00f      	b.n	8002b40 <_malloc_r+0xb0>
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	1b52      	subs	r2, r2, r5
 8002b24:	d41f      	bmi.n	8002b66 <_malloc_r+0xd6>
 8002b26:	2a0b      	cmp	r2, #11
 8002b28:	d917      	bls.n	8002b5a <_malloc_r+0xca>
 8002b2a:	1961      	adds	r1, r4, r5
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	6025      	str	r5, [r4, #0]
 8002b30:	bf18      	it	ne
 8002b32:	6059      	strne	r1, [r3, #4]
 8002b34:	6863      	ldr	r3, [r4, #4]
 8002b36:	bf08      	it	eq
 8002b38:	f8c8 1000 	streq.w	r1, [r8]
 8002b3c:	5162      	str	r2, [r4, r5]
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	4638      	mov	r0, r7
 8002b42:	f104 060b 	add.w	r6, r4, #11
 8002b46:	f000 f829 	bl	8002b9c <__malloc_unlock>
 8002b4a:	f026 0607 	bic.w	r6, r6, #7
 8002b4e:	1d23      	adds	r3, r4, #4
 8002b50:	1af2      	subs	r2, r6, r3
 8002b52:	d0ae      	beq.n	8002ab2 <_malloc_r+0x22>
 8002b54:	1b9b      	subs	r3, r3, r6
 8002b56:	50a3      	str	r3, [r4, r2]
 8002b58:	e7ab      	b.n	8002ab2 <_malloc_r+0x22>
 8002b5a:	42a3      	cmp	r3, r4
 8002b5c:	6862      	ldr	r2, [r4, #4]
 8002b5e:	d1dd      	bne.n	8002b1c <_malloc_r+0x8c>
 8002b60:	f8c8 2000 	str.w	r2, [r8]
 8002b64:	e7ec      	b.n	8002b40 <_malloc_r+0xb0>
 8002b66:	4623      	mov	r3, r4
 8002b68:	6864      	ldr	r4, [r4, #4]
 8002b6a:	e7ac      	b.n	8002ac6 <_malloc_r+0x36>
 8002b6c:	4634      	mov	r4, r6
 8002b6e:	6876      	ldr	r6, [r6, #4]
 8002b70:	e7b4      	b.n	8002adc <_malloc_r+0x4c>
 8002b72:	4613      	mov	r3, r2
 8002b74:	e7cc      	b.n	8002b10 <_malloc_r+0x80>
 8002b76:	230c      	movs	r3, #12
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	f000 f80e 	bl	8002b9c <__malloc_unlock>
 8002b80:	e797      	b.n	8002ab2 <_malloc_r+0x22>
 8002b82:	6025      	str	r5, [r4, #0]
 8002b84:	e7dc      	b.n	8002b40 <_malloc_r+0xb0>
 8002b86:	605b      	str	r3, [r3, #4]
 8002b88:	deff      	udf	#255	; 0xff
 8002b8a:	bf00      	nop
 8002b8c:	20000328 	.word	0x20000328

08002b90 <__malloc_lock>:
 8002b90:	4801      	ldr	r0, [pc, #4]	; (8002b98 <__malloc_lock+0x8>)
 8002b92:	f7ff bf0f 	b.w	80029b4 <__retarget_lock_acquire_recursive>
 8002b96:	bf00      	nop
 8002b98:	20000324 	.word	0x20000324

08002b9c <__malloc_unlock>:
 8002b9c:	4801      	ldr	r0, [pc, #4]	; (8002ba4 <__malloc_unlock+0x8>)
 8002b9e:	f7ff bf0a 	b.w	80029b6 <__retarget_lock_release_recursive>
 8002ba2:	bf00      	nop
 8002ba4:	20000324 	.word	0x20000324

08002ba8 <__sfputc_r>:
 8002ba8:	6893      	ldr	r3, [r2, #8]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	b410      	push	{r4}
 8002bb0:	6093      	str	r3, [r2, #8]
 8002bb2:	da08      	bge.n	8002bc6 <__sfputc_r+0x1e>
 8002bb4:	6994      	ldr	r4, [r2, #24]
 8002bb6:	42a3      	cmp	r3, r4
 8002bb8:	db01      	blt.n	8002bbe <__sfputc_r+0x16>
 8002bba:	290a      	cmp	r1, #10
 8002bbc:	d103      	bne.n	8002bc6 <__sfputc_r+0x1e>
 8002bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bc2:	f7ff bdea 	b.w	800279a <__swbuf_r>
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	1c58      	adds	r0, r3, #1
 8002bca:	6010      	str	r0, [r2, #0]
 8002bcc:	7019      	strb	r1, [r3, #0]
 8002bce:	4608      	mov	r0, r1
 8002bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <__sfputs_r>:
 8002bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd8:	4606      	mov	r6, r0
 8002bda:	460f      	mov	r7, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	18d5      	adds	r5, r2, r3
 8002be0:	42ac      	cmp	r4, r5
 8002be2:	d101      	bne.n	8002be8 <__sfputs_r+0x12>
 8002be4:	2000      	movs	r0, #0
 8002be6:	e007      	b.n	8002bf8 <__sfputs_r+0x22>
 8002be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bec:	463a      	mov	r2, r7
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f7ff ffda 	bl	8002ba8 <__sfputc_r>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	d1f3      	bne.n	8002be0 <__sfputs_r+0xa>
 8002bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bfc <_vfiprintf_r>:
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	460d      	mov	r5, r1
 8002c02:	b09d      	sub	sp, #116	; 0x74
 8002c04:	4614      	mov	r4, r2
 8002c06:	4698      	mov	r8, r3
 8002c08:	4606      	mov	r6, r0
 8002c0a:	b118      	cbz	r0, 8002c14 <_vfiprintf_r+0x18>
 8002c0c:	6a03      	ldr	r3, [r0, #32]
 8002c0e:	b90b      	cbnz	r3, 8002c14 <_vfiprintf_r+0x18>
 8002c10:	f7ff fcdc 	bl	80025cc <__sinit>
 8002c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c16:	07d9      	lsls	r1, r3, #31
 8002c18:	d405      	bmi.n	8002c26 <_vfiprintf_r+0x2a>
 8002c1a:	89ab      	ldrh	r3, [r5, #12]
 8002c1c:	059a      	lsls	r2, r3, #22
 8002c1e:	d402      	bmi.n	8002c26 <_vfiprintf_r+0x2a>
 8002c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c22:	f7ff fec7 	bl	80029b4 <__retarget_lock_acquire_recursive>
 8002c26:	89ab      	ldrh	r3, [r5, #12]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	d501      	bpl.n	8002c30 <_vfiprintf_r+0x34>
 8002c2c:	692b      	ldr	r3, [r5, #16]
 8002c2e:	b99b      	cbnz	r3, 8002c58 <_vfiprintf_r+0x5c>
 8002c30:	4629      	mov	r1, r5
 8002c32:	4630      	mov	r0, r6
 8002c34:	f7ff fdee 	bl	8002814 <__swsetup_r>
 8002c38:	b170      	cbz	r0, 8002c58 <_vfiprintf_r+0x5c>
 8002c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c3c:	07dc      	lsls	r4, r3, #31
 8002c3e:	d504      	bpl.n	8002c4a <_vfiprintf_r+0x4e>
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	b01d      	add	sp, #116	; 0x74
 8002c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c4a:	89ab      	ldrh	r3, [r5, #12]
 8002c4c:	0598      	lsls	r0, r3, #22
 8002c4e:	d4f7      	bmi.n	8002c40 <_vfiprintf_r+0x44>
 8002c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c52:	f7ff feb0 	bl	80029b6 <__retarget_lock_release_recursive>
 8002c56:	e7f3      	b.n	8002c40 <_vfiprintf_r+0x44>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c66:	2330      	movs	r3, #48	; 0x30
 8002c68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002e1c <_vfiprintf_r+0x220>
 8002c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c70:	f04f 0901 	mov.w	r9, #1
 8002c74:	4623      	mov	r3, r4
 8002c76:	469a      	mov	sl, r3
 8002c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c7c:	b10a      	cbz	r2, 8002c82 <_vfiprintf_r+0x86>
 8002c7e:	2a25      	cmp	r2, #37	; 0x25
 8002c80:	d1f9      	bne.n	8002c76 <_vfiprintf_r+0x7a>
 8002c82:	ebba 0b04 	subs.w	fp, sl, r4
 8002c86:	d00b      	beq.n	8002ca0 <_vfiprintf_r+0xa4>
 8002c88:	465b      	mov	r3, fp
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f7ff ffa1 	bl	8002bd6 <__sfputs_r>
 8002c94:	3001      	adds	r0, #1
 8002c96:	f000 80a9 	beq.w	8002dec <_vfiprintf_r+0x1f0>
 8002c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c9c:	445a      	add	r2, fp
 8002c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8002ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a1 	beq.w	8002dec <_vfiprintf_r+0x1f0>
 8002caa:	2300      	movs	r3, #0
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cb4:	f10a 0a01 	add.w	sl, sl, #1
 8002cb8:	9304      	str	r3, [sp, #16]
 8002cba:	9307      	str	r3, [sp, #28]
 8002cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8002cc2:	4654      	mov	r4, sl
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cca:	4854      	ldr	r0, [pc, #336]	; (8002e1c <_vfiprintf_r+0x220>)
 8002ccc:	f7fd fab0 	bl	8000230 <memchr>
 8002cd0:	9a04      	ldr	r2, [sp, #16]
 8002cd2:	b9d8      	cbnz	r0, 8002d0c <_vfiprintf_r+0x110>
 8002cd4:	06d1      	lsls	r1, r2, #27
 8002cd6:	bf44      	itt	mi
 8002cd8:	2320      	movmi	r3, #32
 8002cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cde:	0713      	lsls	r3, r2, #28
 8002ce0:	bf44      	itt	mi
 8002ce2:	232b      	movmi	r3, #43	; 0x2b
 8002ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cec:	2b2a      	cmp	r3, #42	; 0x2a
 8002cee:	d015      	beq.n	8002d1c <_vfiprintf_r+0x120>
 8002cf0:	9a07      	ldr	r2, [sp, #28]
 8002cf2:	4654      	mov	r4, sl
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f04f 0c0a 	mov.w	ip, #10
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d00:	3b30      	subs	r3, #48	; 0x30
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	d94d      	bls.n	8002da2 <_vfiprintf_r+0x1a6>
 8002d06:	b1b0      	cbz	r0, 8002d36 <_vfiprintf_r+0x13a>
 8002d08:	9207      	str	r2, [sp, #28]
 8002d0a:	e014      	b.n	8002d36 <_vfiprintf_r+0x13a>
 8002d0c:	eba0 0308 	sub.w	r3, r0, r8
 8002d10:	fa09 f303 	lsl.w	r3, r9, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	46a2      	mov	sl, r4
 8002d1a:	e7d2      	b.n	8002cc2 <_vfiprintf_r+0xc6>
 8002d1c:	9b03      	ldr	r3, [sp, #12]
 8002d1e:	1d19      	adds	r1, r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	9103      	str	r1, [sp, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bfbb      	ittet	lt
 8002d28:	425b      	neglt	r3, r3
 8002d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d2e:	9307      	strge	r3, [sp, #28]
 8002d30:	9307      	strlt	r3, [sp, #28]
 8002d32:	bfb8      	it	lt
 8002d34:	9204      	strlt	r2, [sp, #16]
 8002d36:	7823      	ldrb	r3, [r4, #0]
 8002d38:	2b2e      	cmp	r3, #46	; 0x2e
 8002d3a:	d10c      	bne.n	8002d56 <_vfiprintf_r+0x15a>
 8002d3c:	7863      	ldrb	r3, [r4, #1]
 8002d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d40:	d134      	bne.n	8002dac <_vfiprintf_r+0x1b0>
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	1d1a      	adds	r2, r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	9203      	str	r2, [sp, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bfb8      	it	lt
 8002d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d52:	3402      	adds	r4, #2
 8002d54:	9305      	str	r3, [sp, #20]
 8002d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002e2c <_vfiprintf_r+0x230>
 8002d5a:	7821      	ldrb	r1, [r4, #0]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4650      	mov	r0, sl
 8002d60:	f7fd fa66 	bl	8000230 <memchr>
 8002d64:	b138      	cbz	r0, 8002d76 <_vfiprintf_r+0x17a>
 8002d66:	9b04      	ldr	r3, [sp, #16]
 8002d68:	eba0 000a 	sub.w	r0, r0, sl
 8002d6c:	2240      	movs	r2, #64	; 0x40
 8002d6e:	4082      	lsls	r2, r0
 8002d70:	4313      	orrs	r3, r2
 8002d72:	3401      	adds	r4, #1
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d7a:	4829      	ldr	r0, [pc, #164]	; (8002e20 <_vfiprintf_r+0x224>)
 8002d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d80:	2206      	movs	r2, #6
 8002d82:	f7fd fa55 	bl	8000230 <memchr>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d03f      	beq.n	8002e0a <_vfiprintf_r+0x20e>
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <_vfiprintf_r+0x228>)
 8002d8c:	bb1b      	cbnz	r3, 8002dd6 <_vfiprintf_r+0x1da>
 8002d8e:	9b03      	ldr	r3, [sp, #12]
 8002d90:	3307      	adds	r3, #7
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	3308      	adds	r3, #8
 8002d98:	9303      	str	r3, [sp, #12]
 8002d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d9c:	443b      	add	r3, r7
 8002d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002da0:	e768      	b.n	8002c74 <_vfiprintf_r+0x78>
 8002da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002da6:	460c      	mov	r4, r1
 8002da8:	2001      	movs	r0, #1
 8002daa:	e7a6      	b.n	8002cfa <_vfiprintf_r+0xfe>
 8002dac:	2300      	movs	r3, #0
 8002dae:	3401      	adds	r4, #1
 8002db0:	9305      	str	r3, [sp, #20]
 8002db2:	4619      	mov	r1, r3
 8002db4:	f04f 0c0a 	mov.w	ip, #10
 8002db8:	4620      	mov	r0, r4
 8002dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dbe:	3a30      	subs	r2, #48	; 0x30
 8002dc0:	2a09      	cmp	r2, #9
 8002dc2:	d903      	bls.n	8002dcc <_vfiprintf_r+0x1d0>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0c6      	beq.n	8002d56 <_vfiprintf_r+0x15a>
 8002dc8:	9105      	str	r1, [sp, #20]
 8002dca:	e7c4      	b.n	8002d56 <_vfiprintf_r+0x15a>
 8002dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e7f0      	b.n	8002db8 <_vfiprintf_r+0x1bc>
 8002dd6:	ab03      	add	r3, sp, #12
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	462a      	mov	r2, r5
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <_vfiprintf_r+0x22c>)
 8002dde:	a904      	add	r1, sp, #16
 8002de0:	4630      	mov	r0, r6
 8002de2:	f3af 8000 	nop.w
 8002de6:	4607      	mov	r7, r0
 8002de8:	1c78      	adds	r0, r7, #1
 8002dea:	d1d6      	bne.n	8002d9a <_vfiprintf_r+0x19e>
 8002dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dee:	07d9      	lsls	r1, r3, #31
 8002df0:	d405      	bmi.n	8002dfe <_vfiprintf_r+0x202>
 8002df2:	89ab      	ldrh	r3, [r5, #12]
 8002df4:	059a      	lsls	r2, r3, #22
 8002df6:	d402      	bmi.n	8002dfe <_vfiprintf_r+0x202>
 8002df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dfa:	f7ff fddc 	bl	80029b6 <__retarget_lock_release_recursive>
 8002dfe:	89ab      	ldrh	r3, [r5, #12]
 8002e00:	065b      	lsls	r3, r3, #25
 8002e02:	f53f af1d 	bmi.w	8002c40 <_vfiprintf_r+0x44>
 8002e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e08:	e71c      	b.n	8002c44 <_vfiprintf_r+0x48>
 8002e0a:	ab03      	add	r3, sp, #12
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	462a      	mov	r2, r5
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <_vfiprintf_r+0x22c>)
 8002e12:	a904      	add	r1, sp, #16
 8002e14:	4630      	mov	r0, r6
 8002e16:	f000 f879 	bl	8002f0c <_printf_i>
 8002e1a:	e7e4      	b.n	8002de6 <_vfiprintf_r+0x1ea>
 8002e1c:	08003430 	.word	0x08003430
 8002e20:	0800343a 	.word	0x0800343a
 8002e24:	00000000 	.word	0x00000000
 8002e28:	08002bd7 	.word	0x08002bd7
 8002e2c:	08003436 	.word	0x08003436

08002e30 <_printf_common>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	4616      	mov	r6, r2
 8002e36:	4699      	mov	r9, r3
 8002e38:	688a      	ldr	r2, [r1, #8]
 8002e3a:	690b      	ldr	r3, [r1, #16]
 8002e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bfb8      	it	lt
 8002e44:	4613      	movlt	r3, r2
 8002e46:	6033      	str	r3, [r6, #0]
 8002e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	b10a      	cbz	r2, 8002e56 <_printf_common+0x26>
 8002e52:	3301      	adds	r3, #1
 8002e54:	6033      	str	r3, [r6, #0]
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	0699      	lsls	r1, r3, #26
 8002e5a:	bf42      	ittt	mi
 8002e5c:	6833      	ldrmi	r3, [r6, #0]
 8002e5e:	3302      	addmi	r3, #2
 8002e60:	6033      	strmi	r3, [r6, #0]
 8002e62:	6825      	ldr	r5, [r4, #0]
 8002e64:	f015 0506 	ands.w	r5, r5, #6
 8002e68:	d106      	bne.n	8002e78 <_printf_common+0x48>
 8002e6a:	f104 0a19 	add.w	sl, r4, #25
 8002e6e:	68e3      	ldr	r3, [r4, #12]
 8002e70:	6832      	ldr	r2, [r6, #0]
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	42ab      	cmp	r3, r5
 8002e76:	dc26      	bgt.n	8002ec6 <_printf_common+0x96>
 8002e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e7c:	1e13      	subs	r3, r2, #0
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	bf18      	it	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	0692      	lsls	r2, r2, #26
 8002e86:	d42b      	bmi.n	8002ee0 <_printf_common+0xb0>
 8002e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	4638      	mov	r0, r7
 8002e90:	47c0      	blx	r8
 8002e92:	3001      	adds	r0, #1
 8002e94:	d01e      	beq.n	8002ed4 <_printf_common+0xa4>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	6922      	ldr	r2, [r4, #16]
 8002e9a:	f003 0306 	and.w	r3, r3, #6
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf02      	ittt	eq
 8002ea2:	68e5      	ldreq	r5, [r4, #12]
 8002ea4:	6833      	ldreq	r3, [r6, #0]
 8002ea6:	1aed      	subeq	r5, r5, r3
 8002ea8:	68a3      	ldr	r3, [r4, #8]
 8002eaa:	bf0c      	ite	eq
 8002eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eb0:	2500      	movne	r5, #0
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bfc4      	itt	gt
 8002eb6:	1a9b      	subgt	r3, r3, r2
 8002eb8:	18ed      	addgt	r5, r5, r3
 8002eba:	2600      	movs	r6, #0
 8002ebc:	341a      	adds	r4, #26
 8002ebe:	42b5      	cmp	r5, r6
 8002ec0:	d11a      	bne.n	8002ef8 <_printf_common+0xc8>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e008      	b.n	8002ed8 <_printf_common+0xa8>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4652      	mov	r2, sl
 8002eca:	4649      	mov	r1, r9
 8002ecc:	4638      	mov	r0, r7
 8002ece:	47c0      	blx	r8
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d103      	bne.n	8002edc <_printf_common+0xac>
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002edc:	3501      	adds	r5, #1
 8002ede:	e7c6      	b.n	8002e6e <_printf_common+0x3e>
 8002ee0:	18e1      	adds	r1, r4, r3
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	2030      	movs	r0, #48	; 0x30
 8002ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002eea:	4422      	add	r2, r4
 8002eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	e7c7      	b.n	8002e88 <_printf_common+0x58>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4622      	mov	r2, r4
 8002efc:	4649      	mov	r1, r9
 8002efe:	4638      	mov	r0, r7
 8002f00:	47c0      	blx	r8
 8002f02:	3001      	adds	r0, #1
 8002f04:	d0e6      	beq.n	8002ed4 <_printf_common+0xa4>
 8002f06:	3601      	adds	r6, #1
 8002f08:	e7d9      	b.n	8002ebe <_printf_common+0x8e>
	...

08002f0c <_printf_i>:
 8002f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	7e0f      	ldrb	r7, [r1, #24]
 8002f12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f14:	2f78      	cmp	r7, #120	; 0x78
 8002f16:	4691      	mov	r9, r2
 8002f18:	4680      	mov	r8, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	469a      	mov	sl, r3
 8002f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f22:	d807      	bhi.n	8002f34 <_printf_i+0x28>
 8002f24:	2f62      	cmp	r7, #98	; 0x62
 8002f26:	d80a      	bhi.n	8002f3e <_printf_i+0x32>
 8002f28:	2f00      	cmp	r7, #0
 8002f2a:	f000 80d4 	beq.w	80030d6 <_printf_i+0x1ca>
 8002f2e:	2f58      	cmp	r7, #88	; 0x58
 8002f30:	f000 80c0 	beq.w	80030b4 <_printf_i+0x1a8>
 8002f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f3c:	e03a      	b.n	8002fb4 <_printf_i+0xa8>
 8002f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f42:	2b15      	cmp	r3, #21
 8002f44:	d8f6      	bhi.n	8002f34 <_printf_i+0x28>
 8002f46:	a101      	add	r1, pc, #4	; (adr r1, 8002f4c <_printf_i+0x40>)
 8002f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f4c:	08002fa5 	.word	0x08002fa5
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002f35 	.word	0x08002f35
 8002f58:	08002f35 	.word	0x08002f35
 8002f5c:	08002f35 	.word	0x08002f35
 8002f60:	08002f35 	.word	0x08002f35
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002f35 	.word	0x08002f35
 8002f6c:	08002f35 	.word	0x08002f35
 8002f70:	08002f35 	.word	0x08002f35
 8002f74:	08002f35 	.word	0x08002f35
 8002f78:	080030bd 	.word	0x080030bd
 8002f7c:	08002fe5 	.word	0x08002fe5
 8002f80:	08003077 	.word	0x08003077
 8002f84:	08002f35 	.word	0x08002f35
 8002f88:	08002f35 	.word	0x08002f35
 8002f8c:	080030df 	.word	0x080030df
 8002f90:	08002f35 	.word	0x08002f35
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002f35 	.word	0x08002f35
 8002f9c:	08002f35 	.word	0x08002f35
 8002fa0:	0800307f 	.word	0x0800307f
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	602a      	str	r2, [r5, #0]
 8002fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e09f      	b.n	80030f8 <_printf_i+0x1ec>
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	682b      	ldr	r3, [r5, #0]
 8002fbc:	0607      	lsls	r7, r0, #24
 8002fbe:	f103 0104 	add.w	r1, r3, #4
 8002fc2:	6029      	str	r1, [r5, #0]
 8002fc4:	d501      	bpl.n	8002fca <_printf_i+0xbe>
 8002fc6:	681e      	ldr	r6, [r3, #0]
 8002fc8:	e003      	b.n	8002fd2 <_printf_i+0xc6>
 8002fca:	0646      	lsls	r6, r0, #25
 8002fcc:	d5fb      	bpl.n	8002fc6 <_printf_i+0xba>
 8002fce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002fd2:	2e00      	cmp	r6, #0
 8002fd4:	da03      	bge.n	8002fde <_printf_i+0xd2>
 8002fd6:	232d      	movs	r3, #45	; 0x2d
 8002fd8:	4276      	negs	r6, r6
 8002fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fde:	485a      	ldr	r0, [pc, #360]	; (8003148 <_printf_i+0x23c>)
 8002fe0:	230a      	movs	r3, #10
 8002fe2:	e012      	b.n	800300a <_printf_i+0xfe>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	6820      	ldr	r0, [r4, #0]
 8002fe8:	1d19      	adds	r1, r3, #4
 8002fea:	6029      	str	r1, [r5, #0]
 8002fec:	0605      	lsls	r5, r0, #24
 8002fee:	d501      	bpl.n	8002ff4 <_printf_i+0xe8>
 8002ff0:	681e      	ldr	r6, [r3, #0]
 8002ff2:	e002      	b.n	8002ffa <_printf_i+0xee>
 8002ff4:	0641      	lsls	r1, r0, #25
 8002ff6:	d5fb      	bpl.n	8002ff0 <_printf_i+0xe4>
 8002ff8:	881e      	ldrh	r6, [r3, #0]
 8002ffa:	4853      	ldr	r0, [pc, #332]	; (8003148 <_printf_i+0x23c>)
 8002ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8002ffe:	bf0c      	ite	eq
 8003000:	2308      	moveq	r3, #8
 8003002:	230a      	movne	r3, #10
 8003004:	2100      	movs	r1, #0
 8003006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800300a:	6865      	ldr	r5, [r4, #4]
 800300c:	60a5      	str	r5, [r4, #8]
 800300e:	2d00      	cmp	r5, #0
 8003010:	bfa2      	ittt	ge
 8003012:	6821      	ldrge	r1, [r4, #0]
 8003014:	f021 0104 	bicge.w	r1, r1, #4
 8003018:	6021      	strge	r1, [r4, #0]
 800301a:	b90e      	cbnz	r6, 8003020 <_printf_i+0x114>
 800301c:	2d00      	cmp	r5, #0
 800301e:	d04b      	beq.n	80030b8 <_printf_i+0x1ac>
 8003020:	4615      	mov	r5, r2
 8003022:	fbb6 f1f3 	udiv	r1, r6, r3
 8003026:	fb03 6711 	mls	r7, r3, r1, r6
 800302a:	5dc7      	ldrb	r7, [r0, r7]
 800302c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003030:	4637      	mov	r7, r6
 8003032:	42bb      	cmp	r3, r7
 8003034:	460e      	mov	r6, r1
 8003036:	d9f4      	bls.n	8003022 <_printf_i+0x116>
 8003038:	2b08      	cmp	r3, #8
 800303a:	d10b      	bne.n	8003054 <_printf_i+0x148>
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	07de      	lsls	r6, r3, #31
 8003040:	d508      	bpl.n	8003054 <_printf_i+0x148>
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	6861      	ldr	r1, [r4, #4]
 8003046:	4299      	cmp	r1, r3
 8003048:	bfde      	ittt	le
 800304a:	2330      	movle	r3, #48	; 0x30
 800304c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003054:	1b52      	subs	r2, r2, r5
 8003056:	6122      	str	r2, [r4, #16]
 8003058:	f8cd a000 	str.w	sl, [sp]
 800305c:	464b      	mov	r3, r9
 800305e:	aa03      	add	r2, sp, #12
 8003060:	4621      	mov	r1, r4
 8003062:	4640      	mov	r0, r8
 8003064:	f7ff fee4 	bl	8002e30 <_printf_common>
 8003068:	3001      	adds	r0, #1
 800306a:	d14a      	bne.n	8003102 <_printf_i+0x1f6>
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	b004      	add	sp, #16
 8003072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	4833      	ldr	r0, [pc, #204]	; (800314c <_printf_i+0x240>)
 8003080:	2778      	movs	r7, #120	; 0x78
 8003082:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	6829      	ldr	r1, [r5, #0]
 800308a:	061f      	lsls	r7, r3, #24
 800308c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003090:	d402      	bmi.n	8003098 <_printf_i+0x18c>
 8003092:	065f      	lsls	r7, r3, #25
 8003094:	bf48      	it	mi
 8003096:	b2b6      	uxthmi	r6, r6
 8003098:	07df      	lsls	r7, r3, #31
 800309a:	bf48      	it	mi
 800309c:	f043 0320 	orrmi.w	r3, r3, #32
 80030a0:	6029      	str	r1, [r5, #0]
 80030a2:	bf48      	it	mi
 80030a4:	6023      	strmi	r3, [r4, #0]
 80030a6:	b91e      	cbnz	r6, 80030b0 <_printf_i+0x1a4>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	f023 0320 	bic.w	r3, r3, #32
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	2310      	movs	r3, #16
 80030b2:	e7a7      	b.n	8003004 <_printf_i+0xf8>
 80030b4:	4824      	ldr	r0, [pc, #144]	; (8003148 <_printf_i+0x23c>)
 80030b6:	e7e4      	b.n	8003082 <_printf_i+0x176>
 80030b8:	4615      	mov	r5, r2
 80030ba:	e7bd      	b.n	8003038 <_printf_i+0x12c>
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	6826      	ldr	r6, [r4, #0]
 80030c0:	6961      	ldr	r1, [r4, #20]
 80030c2:	1d18      	adds	r0, r3, #4
 80030c4:	6028      	str	r0, [r5, #0]
 80030c6:	0635      	lsls	r5, r6, #24
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	d501      	bpl.n	80030d0 <_printf_i+0x1c4>
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	e002      	b.n	80030d6 <_printf_i+0x1ca>
 80030d0:	0670      	lsls	r0, r6, #25
 80030d2:	d5fb      	bpl.n	80030cc <_printf_i+0x1c0>
 80030d4:	8019      	strh	r1, [r3, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	6123      	str	r3, [r4, #16]
 80030da:	4615      	mov	r5, r2
 80030dc:	e7bc      	b.n	8003058 <_printf_i+0x14c>
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	1d1a      	adds	r2, r3, #4
 80030e2:	602a      	str	r2, [r5, #0]
 80030e4:	681d      	ldr	r5, [r3, #0]
 80030e6:	6862      	ldr	r2, [r4, #4]
 80030e8:	2100      	movs	r1, #0
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7fd f8a0 	bl	8000230 <memchr>
 80030f0:	b108      	cbz	r0, 80030f6 <_printf_i+0x1ea>
 80030f2:	1b40      	subs	r0, r0, r5
 80030f4:	6060      	str	r0, [r4, #4]
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	6123      	str	r3, [r4, #16]
 80030fa:	2300      	movs	r3, #0
 80030fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003100:	e7aa      	b.n	8003058 <_printf_i+0x14c>
 8003102:	6923      	ldr	r3, [r4, #16]
 8003104:	462a      	mov	r2, r5
 8003106:	4649      	mov	r1, r9
 8003108:	4640      	mov	r0, r8
 800310a:	47d0      	blx	sl
 800310c:	3001      	adds	r0, #1
 800310e:	d0ad      	beq.n	800306c <_printf_i+0x160>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	079b      	lsls	r3, r3, #30
 8003114:	d413      	bmi.n	800313e <_printf_i+0x232>
 8003116:	68e0      	ldr	r0, [r4, #12]
 8003118:	9b03      	ldr	r3, [sp, #12]
 800311a:	4298      	cmp	r0, r3
 800311c:	bfb8      	it	lt
 800311e:	4618      	movlt	r0, r3
 8003120:	e7a6      	b.n	8003070 <_printf_i+0x164>
 8003122:	2301      	movs	r3, #1
 8003124:	4632      	mov	r2, r6
 8003126:	4649      	mov	r1, r9
 8003128:	4640      	mov	r0, r8
 800312a:	47d0      	blx	sl
 800312c:	3001      	adds	r0, #1
 800312e:	d09d      	beq.n	800306c <_printf_i+0x160>
 8003130:	3501      	adds	r5, #1
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	9903      	ldr	r1, [sp, #12]
 8003136:	1a5b      	subs	r3, r3, r1
 8003138:	42ab      	cmp	r3, r5
 800313a:	dcf2      	bgt.n	8003122 <_printf_i+0x216>
 800313c:	e7eb      	b.n	8003116 <_printf_i+0x20a>
 800313e:	2500      	movs	r5, #0
 8003140:	f104 0619 	add.w	r6, r4, #25
 8003144:	e7f5      	b.n	8003132 <_printf_i+0x226>
 8003146:	bf00      	nop
 8003148:	08003441 	.word	0x08003441
 800314c:	08003452 	.word	0x08003452

08003150 <__sflush_r>:
 8003150:	898a      	ldrh	r2, [r1, #12]
 8003152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003156:	4605      	mov	r5, r0
 8003158:	0710      	lsls	r0, r2, #28
 800315a:	460c      	mov	r4, r1
 800315c:	d458      	bmi.n	8003210 <__sflush_r+0xc0>
 800315e:	684b      	ldr	r3, [r1, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	dc05      	bgt.n	8003170 <__sflush_r+0x20>
 8003164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	dc02      	bgt.n	8003170 <__sflush_r+0x20>
 800316a:	2000      	movs	r0, #0
 800316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003172:	2e00      	cmp	r6, #0
 8003174:	d0f9      	beq.n	800316a <__sflush_r+0x1a>
 8003176:	2300      	movs	r3, #0
 8003178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800317c:	682f      	ldr	r7, [r5, #0]
 800317e:	6a21      	ldr	r1, [r4, #32]
 8003180:	602b      	str	r3, [r5, #0]
 8003182:	d032      	beq.n	80031ea <__sflush_r+0x9a>
 8003184:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	075a      	lsls	r2, r3, #29
 800318a:	d505      	bpl.n	8003198 <__sflush_r+0x48>
 800318c:	6863      	ldr	r3, [r4, #4]
 800318e:	1ac0      	subs	r0, r0, r3
 8003190:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003192:	b10b      	cbz	r3, 8003198 <__sflush_r+0x48>
 8003194:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003196:	1ac0      	subs	r0, r0, r3
 8003198:	2300      	movs	r3, #0
 800319a:	4602      	mov	r2, r0
 800319c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800319e:	6a21      	ldr	r1, [r4, #32]
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b0      	blx	r6
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	d106      	bne.n	80031b8 <__sflush_r+0x68>
 80031aa:	6829      	ldr	r1, [r5, #0]
 80031ac:	291d      	cmp	r1, #29
 80031ae:	d82b      	bhi.n	8003208 <__sflush_r+0xb8>
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <__sflush_r+0x108>)
 80031b2:	410a      	asrs	r2, r1
 80031b4:	07d6      	lsls	r6, r2, #31
 80031b6:	d427      	bmi.n	8003208 <__sflush_r+0xb8>
 80031b8:	2200      	movs	r2, #0
 80031ba:	6062      	str	r2, [r4, #4]
 80031bc:	04d9      	lsls	r1, r3, #19
 80031be:	6922      	ldr	r2, [r4, #16]
 80031c0:	6022      	str	r2, [r4, #0]
 80031c2:	d504      	bpl.n	80031ce <__sflush_r+0x7e>
 80031c4:	1c42      	adds	r2, r0, #1
 80031c6:	d101      	bne.n	80031cc <__sflush_r+0x7c>
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	b903      	cbnz	r3, 80031ce <__sflush_r+0x7e>
 80031cc:	6560      	str	r0, [r4, #84]	; 0x54
 80031ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d0:	602f      	str	r7, [r5, #0]
 80031d2:	2900      	cmp	r1, #0
 80031d4:	d0c9      	beq.n	800316a <__sflush_r+0x1a>
 80031d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031da:	4299      	cmp	r1, r3
 80031dc:	d002      	beq.n	80031e4 <__sflush_r+0x94>
 80031de:	4628      	mov	r0, r5
 80031e0:	f7ff fbea 	bl	80029b8 <_free_r>
 80031e4:	2000      	movs	r0, #0
 80031e6:	6360      	str	r0, [r4, #52]	; 0x34
 80031e8:	e7c0      	b.n	800316c <__sflush_r+0x1c>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4628      	mov	r0, r5
 80031ee:	47b0      	blx	r6
 80031f0:	1c41      	adds	r1, r0, #1
 80031f2:	d1c8      	bne.n	8003186 <__sflush_r+0x36>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0c5      	beq.n	8003186 <__sflush_r+0x36>
 80031fa:	2b1d      	cmp	r3, #29
 80031fc:	d001      	beq.n	8003202 <__sflush_r+0xb2>
 80031fe:	2b16      	cmp	r3, #22
 8003200:	d101      	bne.n	8003206 <__sflush_r+0xb6>
 8003202:	602f      	str	r7, [r5, #0]
 8003204:	e7b1      	b.n	800316a <__sflush_r+0x1a>
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320c:	81a3      	strh	r3, [r4, #12]
 800320e:	e7ad      	b.n	800316c <__sflush_r+0x1c>
 8003210:	690f      	ldr	r7, [r1, #16]
 8003212:	2f00      	cmp	r7, #0
 8003214:	d0a9      	beq.n	800316a <__sflush_r+0x1a>
 8003216:	0793      	lsls	r3, r2, #30
 8003218:	680e      	ldr	r6, [r1, #0]
 800321a:	bf08      	it	eq
 800321c:	694b      	ldreq	r3, [r1, #20]
 800321e:	600f      	str	r7, [r1, #0]
 8003220:	bf18      	it	ne
 8003222:	2300      	movne	r3, #0
 8003224:	eba6 0807 	sub.w	r8, r6, r7
 8003228:	608b      	str	r3, [r1, #8]
 800322a:	f1b8 0f00 	cmp.w	r8, #0
 800322e:	dd9c      	ble.n	800316a <__sflush_r+0x1a>
 8003230:	6a21      	ldr	r1, [r4, #32]
 8003232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003234:	4643      	mov	r3, r8
 8003236:	463a      	mov	r2, r7
 8003238:	4628      	mov	r0, r5
 800323a:	47b0      	blx	r6
 800323c:	2800      	cmp	r0, #0
 800323e:	dc06      	bgt.n	800324e <__sflush_r+0xfe>
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003246:	81a3      	strh	r3, [r4, #12]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	e78e      	b.n	800316c <__sflush_r+0x1c>
 800324e:	4407      	add	r7, r0
 8003250:	eba8 0800 	sub.w	r8, r8, r0
 8003254:	e7e9      	b.n	800322a <__sflush_r+0xda>
 8003256:	bf00      	nop
 8003258:	dfbffffe 	.word	0xdfbffffe

0800325c <_fflush_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	690b      	ldr	r3, [r1, #16]
 8003260:	4605      	mov	r5, r0
 8003262:	460c      	mov	r4, r1
 8003264:	b913      	cbnz	r3, 800326c <_fflush_r+0x10>
 8003266:	2500      	movs	r5, #0
 8003268:	4628      	mov	r0, r5
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	b118      	cbz	r0, 8003276 <_fflush_r+0x1a>
 800326e:	6a03      	ldr	r3, [r0, #32]
 8003270:	b90b      	cbnz	r3, 8003276 <_fflush_r+0x1a>
 8003272:	f7ff f9ab 	bl	80025cc <__sinit>
 8003276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f3      	beq.n	8003266 <_fflush_r+0xa>
 800327e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003280:	07d0      	lsls	r0, r2, #31
 8003282:	d404      	bmi.n	800328e <_fflush_r+0x32>
 8003284:	0599      	lsls	r1, r3, #22
 8003286:	d402      	bmi.n	800328e <_fflush_r+0x32>
 8003288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800328a:	f7ff fb93 	bl	80029b4 <__retarget_lock_acquire_recursive>
 800328e:	4628      	mov	r0, r5
 8003290:	4621      	mov	r1, r4
 8003292:	f7ff ff5d 	bl	8003150 <__sflush_r>
 8003296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003298:	07da      	lsls	r2, r3, #31
 800329a:	4605      	mov	r5, r0
 800329c:	d4e4      	bmi.n	8003268 <_fflush_r+0xc>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	059b      	lsls	r3, r3, #22
 80032a2:	d4e1      	bmi.n	8003268 <_fflush_r+0xc>
 80032a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032a6:	f7ff fb86 	bl	80029b6 <__retarget_lock_release_recursive>
 80032aa:	e7dd      	b.n	8003268 <_fflush_r+0xc>

080032ac <__swhatbuf_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	460c      	mov	r4, r1
 80032b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b4:	2900      	cmp	r1, #0
 80032b6:	b096      	sub	sp, #88	; 0x58
 80032b8:	4615      	mov	r5, r2
 80032ba:	461e      	mov	r6, r3
 80032bc:	da0d      	bge.n	80032da <__swhatbuf_r+0x2e>
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	bf0c      	ite	eq
 80032ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80032ce:	2340      	movne	r3, #64	; 0x40
 80032d0:	2000      	movs	r0, #0
 80032d2:	6031      	str	r1, [r6, #0]
 80032d4:	602b      	str	r3, [r5, #0]
 80032d6:	b016      	add	sp, #88	; 0x58
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	466a      	mov	r2, sp
 80032dc:	f000 f848 	bl	8003370 <_fstat_r>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	dbec      	blt.n	80032be <__swhatbuf_r+0x12>
 80032e4:	9901      	ldr	r1, [sp, #4]
 80032e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80032ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80032ee:	4259      	negs	r1, r3
 80032f0:	4159      	adcs	r1, r3
 80032f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f6:	e7eb      	b.n	80032d0 <__swhatbuf_r+0x24>

080032f8 <__smakebuf_r>:
 80032f8:	898b      	ldrh	r3, [r1, #12]
 80032fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032fc:	079d      	lsls	r5, r3, #30
 80032fe:	4606      	mov	r6, r0
 8003300:	460c      	mov	r4, r1
 8003302:	d507      	bpl.n	8003314 <__smakebuf_r+0x1c>
 8003304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	2301      	movs	r3, #1
 800330e:	6163      	str	r3, [r4, #20]
 8003310:	b002      	add	sp, #8
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	ab01      	add	r3, sp, #4
 8003316:	466a      	mov	r2, sp
 8003318:	f7ff ffc8 	bl	80032ac <__swhatbuf_r>
 800331c:	9900      	ldr	r1, [sp, #0]
 800331e:	4605      	mov	r5, r0
 8003320:	4630      	mov	r0, r6
 8003322:	f7ff fbb5 	bl	8002a90 <_malloc_r>
 8003326:	b948      	cbnz	r0, 800333c <__smakebuf_r+0x44>
 8003328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800332c:	059a      	lsls	r2, r3, #22
 800332e:	d4ef      	bmi.n	8003310 <__smakebuf_r+0x18>
 8003330:	f023 0303 	bic.w	r3, r3, #3
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	e7e3      	b.n	8003304 <__smakebuf_r+0xc>
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	6020      	str	r0, [r4, #0]
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	81a3      	strh	r3, [r4, #12]
 8003346:	9b00      	ldr	r3, [sp, #0]
 8003348:	6163      	str	r3, [r4, #20]
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	6120      	str	r0, [r4, #16]
 800334e:	b15b      	cbz	r3, 8003368 <__smakebuf_r+0x70>
 8003350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003354:	4630      	mov	r0, r6
 8003356:	f000 f81d 	bl	8003394 <_isatty_r>
 800335a:	b128      	cbz	r0, 8003368 <__smakebuf_r+0x70>
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	81a3      	strh	r3, [r4, #12]
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	431d      	orrs	r5, r3
 800336c:	81a5      	strh	r5, [r4, #12]
 800336e:	e7cf      	b.n	8003310 <__smakebuf_r+0x18>

08003370 <_fstat_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d07      	ldr	r5, [pc, #28]	; (8003390 <_fstat_r+0x20>)
 8003374:	2300      	movs	r3, #0
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	602b      	str	r3, [r5, #0]
 800337e:	f7fd fcc0 	bl	8000d02 <_fstat>
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	d102      	bne.n	800338c <_fstat_r+0x1c>
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	b103      	cbz	r3, 800338c <_fstat_r+0x1c>
 800338a:	6023      	str	r3, [r4, #0]
 800338c:	bd38      	pop	{r3, r4, r5, pc}
 800338e:	bf00      	nop
 8003390:	20000320 	.word	0x20000320

08003394 <_isatty_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4d06      	ldr	r5, [pc, #24]	; (80033b0 <_isatty_r+0x1c>)
 8003398:	2300      	movs	r3, #0
 800339a:	4604      	mov	r4, r0
 800339c:	4608      	mov	r0, r1
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	f7fd fcbf 	bl	8000d22 <_isatty>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_isatty_r+0x1a>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_isatty_r+0x1a>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	20000320 	.word	0x20000320

080033b4 <_sbrk_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4d06      	ldr	r5, [pc, #24]	; (80033d0 <_sbrk_r+0x1c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	4604      	mov	r4, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	602b      	str	r3, [r5, #0]
 80033c0:	f7fd fcc8 	bl	8000d54 <_sbrk>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_sbrk_r+0x1a>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_sbrk_r+0x1a>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000320 	.word	0x20000320

080033d4 <_init>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr

080033e0 <_fini>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr
